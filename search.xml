<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>rabbitmq基本概念</title>
      <link href="/2018/04/18/rabbitmq1/"/>
      <url>/2018/04/18/rabbitmq1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。<br><a id="more"></a> </excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h4 id="rabbitmq基本概念"><a href="#rabbitmq基本概念" class="headerlink" title="rabbitmq基本概念"></a>rabbitmq基本概念</h4><ol><li><p>什么是rabbitmq </p><blockquote><p> Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。</p></blockquote></li><li><p>为什么使用mq?</p><blockquote><p> 场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种1.串行的方式;2.并行的方式<br>(1)串行方式:将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没 有必要等待的东西<br> <img src="https://img-blog.csdn.net/20170209145852454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p></blockquote></li></ol><p>实际上我们并不需要知道短信是否发送成功,因为我们在发送短信时只需要将对应的参数传给调用的第三方服务发送即可.如果第三方短信平台因为网络或者其他问题,导致无法返回响应结果,程序也就在这里阻塞而无法操作.</p><ol start="3"><li>解决 <blockquote><p>引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理,通过消息队列在去执行发送功能</p></blockquote></li></ol><p><strong>关于mq的相关概念可以去查看官方文档 这里不再过多阐述</strong></p><p><strong>以下是自己的理解,如有不对,还请纠正,谢谢! </strong></p><ul><li>生成者  用于发送消息的程序</li><li>消费者  用于消费消息的程序</li><li>队列 暂存消息的缓存区<blockquote><p>rabbitmq的核心思想是 生成者不直接发送任何消息到队列,而实际上生产者并不知道 消息是否会被传送到队列.相反 ,生产者只能将信息发送到exchange交换器中,而交换机负责接收生产者发送的消息,并且将消息发送到指定的队列</p></blockquote></li><li>消息交换机type的类型 创建交换机时需要channel.ExchangeDeclare(name, type,true,false,null);<ul><li>direct 直接的</li><li>Topic  主题</li><li>Headers 标题</li><li>Fanout  分列</li></ul></li></ul><blockquote><p>Direct Exchange – 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。<br>如果一个队列绑定到该交换机上要求路由键 “key”，则只有被标记为“key”的消息才被转发，只会转发key</p></blockquote><blockquote><p>Topic Exchange将路由值与某种模式进行匹配,此时队列需要绑定在一个模式上.符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.</em>” 只会匹配到“audit.irs”。  <a href="http://www.cnblogs.com/lrzr/p/7365731.html" target="_blank" rel="noopener">传送门</a></p></blockquote><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>identityserver</title>
      <link href="/2018/04/18/identityserver/"/>
      <url>/2018/04/18/identityserver/</url>
      <content type="html"><![CDATA[<h1 id="identity-server-4"><a href="#identity-server-4" class="headerlink" title="identity server 4"></a>identity server 4</h1>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> .net core </category>
          
          <category> identity server4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> identity server4 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
