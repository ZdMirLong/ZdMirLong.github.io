<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>rabbitmq4 fanout分列模式使用</title>
      <link href="/2018/04/19/rabbitmq4/"/>
      <url>/2018/04/19/rabbitmq4/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |首页摘要=""></excerpt></p><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote><p>场景 模拟接受email或sms消息</p><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>发送消息<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></li></ul><h4 id="rabbitmq4-fanout分列模式使用"><a href="#rabbitmq4-fanout分列模式使用" class="headerlink" title="rabbitmq4 fanout分列模式使用"></a>rabbitmq4 fanout分列模式使用</h4><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote><p>场景 模拟接受email或sms消息</p><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>发送消息</li></ul><h3 id="生产者程序"><a href="#生产者程序" class="headerlink" title="生产者程序"></a>生产者程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line"> var factory = new ConnectionFactory();</span><br><span class="line"> factory.UserName = &quot;&quot;;</span><br><span class="line"> factory.Password = &quot;&quot;;</span><br><span class="line"> factory.HostName = &quot;&quot;;</span><br><span class="line">   using (var connection=factory.CreateConnection())</span><br><span class="line">          &#123;</span><br><span class="line">              using (var channel=connection.CreateModel())</span><br><span class="line">              &#123;</span><br><span class="line">                  //创建fanout交换器</span><br><span class="line">                  channel.ExchangeDeclare(&quot;ex_fanout&quot;,ExchangeType.Fanout,true,false,null);</span><br><span class="line"></span><br><span class="line">                  for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                  &#123;</span><br><span class="line">                      var reamker = i % 2 == 0 ? &quot;sms&quot; : &quot;emai&quot;;</span><br><span class="line">                      var msg = Encoding.UTF8.GetBytes(this.textBox1.Text+ i.ToString());</span><br><span class="line">                      Console.WriteLine(&quot;内容:发送内容，&quot; + i);</span><br><span class="line">                      //创建队列</span><br><span class="line">                       channel.QueueDeclare(reamker,true,false,false,null);</span><br><span class="line">                      //绑定队列和交换器 不需要指定routingkey 但是不能为null,否则会报错</span><br><span class="line">                      channel.QueueBind(reamker,&quot;ex_fanout&quot;,&quot;&quot;,null);</span><br><span class="line">                    //不需要指定routingkey,指定了也没用.因为交换机是fanout类型</span><br><span class="line">                      channel.BasicPublish(&quot;ex_fanout&quot;, string.Empty, null, msg);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h5 id="特别注意上面’不需要指定routingkey地方’-当我将routingkey的参数值设置为null时会报未将对象引用到实例错误-需要改为””-或者string-empty”"><a href="#特别注意上面’不需要指定routingkey地方’-当我将routingkey的参数值设置为null时会报未将对象引用到实例错误-需要改为””-或者string-empty”" class="headerlink" title="特别注意上面’不需要指定routingkey地方’,当我将routingkey的参数值设置为null时会报未将对象引用到实例错误.需要改为”” 或者string.empty”"></a>特别注意上面’不需要指定routingkey地方’,当我将routingkey的参数值设置为null时会报未将对象引用到实例错误.需要改为”” 或者string.empty”</h5><h3 id="消费者程序实现"><a href="#消费者程序实现" class="headerlink" title="消费者程序实现"></a>消费者程序实现</h3><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>消费消息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line"></span><br><span class="line">         var factory = new ConnectionFactory();</span><br><span class="line">         factory.UserName = &quot;&quot;;</span><br><span class="line">         factory.Password = &quot;&quot;;</span><br><span class="line">         factory.HostName = &quot;&quot;;</span><br><span class="line">         while (true)</span><br><span class="line">         &#123;</span><br><span class="line">             Console.WriteLine(&quot;请选择登陆：1邮箱，2短信?&quot;);</span><br><span class="line">             string input = Console.ReadLine();</span><br><span class="line">             if (input == &quot;1&quot; || input == &quot;2&quot;)</span><br><span class="line">             &#123;</span><br><span class="line">                 var queueName = input == &quot;1&quot; ? &quot;sms&quot; : &quot;emai&quot;;</span><br><span class="line"></span><br><span class="line">                 using (var connection = factory.CreateConnection())</span><br><span class="line">                 &#123;</span><br><span class="line">                     using (var channel = connection.CreateModel())</span><br><span class="line">                     &#123;</span><br><span class="line">                         //指定队列</span><br><span class="line">                         channel.QueueDeclare(queueName,true,false,false,null);</span><br><span class="line">                         //指定交换器</span><br><span class="line">                         channel.ExchangeDeclare(&quot;ex_fanout&quot;,ExchangeType.Fanout,true,false,null);</span><br><span class="line">                         //绑定交换器 当交换器为fanout时不需指定路由 </span><br><span class="line">                         channel.QueueBind(queueName, &quot;ex_fanout&quot;,string.Empty,null);</span><br><span class="line"></span><br><span class="line">                         var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                         consumer.Received += (model,eva)=&gt; &#123;</span><br><span class="line">                             var msg = Encoding.UTF8.GetString(eva.Body);</span><br><span class="line">                             Console.WriteLine(queueName + &quot;显示结果：&quot; + msg);</span><br><span class="line">                         &#125;;</span><br><span class="line">                         //指定消费队列</span><br><span class="line">                         channel.BasicConsume(queueName, true, consumer);</span><br><span class="line">                         Console.ReadKey();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>fanout特点: 　所有发送到Fanout Exchange的消息都会被转发到与该Exchange 绑定(Binding)的所有Queue上。  从上诉实例中我们先申明了一个ex_fanout的交换器 ,而在生产者程序中我们判断i%2是否等于0来指定队列为”sms”或者 “emai”,而这时候不管队列为sms或则email都已经绑定在ex_fanout交换器上,而Fanout Exchange又把消息分发到所有与他绑定的队列中,所以最后的结果都是100条消息</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq3 一个生产者 多个消费者</title>
      <link href="/2018/04/19/rabbitmq3/"/>
      <url>/2018/04/19/rabbitmq3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |首页摘要=""><br>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化</excerpt></p><h3 id="生产者步骤"><a href="#生产者步骤" class="headerlink" title="生产者步骤"></a>生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列</li><li>申明交换器 ExchangeDeclare</li><li>将队列与交换器绑定 QueueBind</li><li>创建属性 设置消息持久化 Persistent</li><li>发送消息到队列并指定消息持久化类型 basicProperties<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h4 id="使用一个生产者-多个消费时需要将队列与路由交换器绑定-并设置消息持久化"><a href="#使用一个生产者-多个消费时需要将队列与路由交换器绑定-并设置消息持久化" class="headerlink" title="使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化"></a>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化</h4></the></li></ul><blockquote><p>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化 </p></blockquote><h3 id="生产者步骤-1"><a href="#生产者步骤-1" class="headerlink" title="生产者步骤"></a>生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列</li><li>申明交换器 ExchangeDeclare</li><li>将队列与交换器绑定 QueueBind</li><li>创建属性 设置消息持久化 Persistent</li><li>发送消息到队列并指定消息持久化类型 basicProperties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line">           var factory = new ConnectionFactory();</span><br><span class="line">           factory.UserName = &quot;UserName&quot;;</span><br><span class="line">           factory.Password = &quot;UserName&quot;;</span><br><span class="line">           factory.HostName = &quot;&quot;;</span><br><span class="line">           using (var connection = factory.CreateConnection())//创建连接</span><br><span class="line">           &#123;</span><br><span class="line">               using (var channel = connection.CreateModel())//创建信道</span><br><span class="line">               &#123;</span><br><span class="line">                   //创建队列  队列名 是否持久化 是否唯一 是否自动删除  参数列表</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   //创建交换器  交换器名称  类型 是否持久化  是否自动删除 其他参数</span><br><span class="line">                   channel.ExchangeDeclare(&quot;ex_hello&quot;, &quot;direct&quot;,true,false,null);</span><br><span class="line"></span><br><span class="line">                   //将队列与交换器绑定 队列名 交换器名 路由名</span><br><span class="line">                   channel.QueueBind(&quot;hello&quot;,&quot;ex_hello&quot;, &quot;Exchange_hello&quot;);</span><br><span class="line"></span><br><span class="line">                   //内容的基本属性</span><br><span class="line">                   var properties = channel.CreateBasicProperties();</span><br><span class="line">                   //设置消息内容持久化</span><br><span class="line">                    properties.Persistent = true;</span><br><span class="line"></span><br><span class="line">                   for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       string msg = this.textBox1.Text.Trim()+&quot;&quot;+i;</span><br><span class="line">                       //rabbitmq发送二进制数据</span><br><span class="line">                       var body = Encoding.UTF8.GetBytes(msg);</span><br><span class="line">                       //发送消息 exchange 交换器  routingKey  路由 </span><br><span class="line">                       channel.BasicPublish(exchange: &quot;ex_hello&quot;, routingKey: &quot;Exchange_hello&quot;, basicProperties: properties, body: body);</span><br><span class="line"></span><br><span class="line">                       this.textBox2.Text += msg + &quot;发送成功!\r\n&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                 </span><br><span class="line"></span><br><span class="line">              </span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列 此处的队列名必须与生产者的队列名相同</li><li>创建交换器 与生产者交换器名字相同</li><li>将队列与交换器绑定 </li><li>设置公平分发 同一时间只处理一个消息</li><li>创建事件驱动的消费者类型，绑定消费 EventingBasicConsumer</li><li>阻塞获取消息</li><li>指定消费队列 BasicConsume</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">            var factory = new ConnectionFactory();</span><br><span class="line">            factory.UserName = &quot;admin&quot;;</span><br><span class="line">            factory.Password = &quot;admin&quot;;</span><br><span class="line">            factory.HostName = &quot;116.196.76.89&quot;;</span><br><span class="line"></span><br><span class="line">            //创建连接</span><br><span class="line">            using (var connection = factory.CreateConnection())</span><br><span class="line">            &#123;//创建信道</span><br><span class="line">                using (var channel = connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    //申明队列</span><br><span class="line">                    channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line"></span><br><span class="line">                    //申明交换器</span><br><span class="line">                    channel.ExchangeDeclare(&quot;ex_hello&quot;, &quot;direct&quot;, true, false, null);</span><br><span class="line">                    //绑定交换器</span><br><span class="line">                    channel.QueueBind(&quot;hello&quot;, &quot;ex_hello&quot;, &quot;Exchange_hello&quot;);</span><br><span class="line"></span><br><span class="line">                    //公平分发 同一时间只处理一个消息</span><br><span class="line">                     channel.BasicQos(0, 1, true);</span><br><span class="line"></span><br><span class="line">                    //创建事件驱动的消费者类型，绑定消费</span><br><span class="line">                    var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                    //阻塞获取消息</span><br><span class="line">                    consumer.Received += (model, ea) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body = ea.Body;</span><br><span class="line">                        var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                        Console.WriteLine(&quot; 我是消费者我接收到消息： &#123;0&#125;&quot;, message);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    //指定消费队列</span><br><span class="line">                    channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">                                         autoAck: true,</span><br><span class="line">                                         consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line"></span><br><span class="line">                    Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq2 在c#中简单使用rabbitmq 实现生产者和消费者</title>
      <link href="/2018/04/19/rabbitmq2/"/>
      <url>/2018/04/19/rabbitmq2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><blockquote><p>要使用rabbitmq,必须先安装它.安装教程网上很多这里直接略过.</p></blockquote><ul><li>新建c#控制台项目,添加Rabbitmq.Client.dll引用  管理nuget包搜索 <code>Rabbitmq.Client</code><a id="more"></a></li></ul><the rest="" of="" contents="" |="" 余下全文=""><h3 id="创建生产者步骤"><a href="#创建生产者步骤" class="headerlink" title="创建生产者步骤"></a>创建生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂</li><li>通过工厂获取连接connection</li><li>创建信道</li><li>申明队列</li><li><p>发送消息到队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line">  var factory = new ConnectionFactory();</span><br><span class="line">  factory.UserName = &quot;UserName&quot;;</span><br><span class="line">  factory.Password = &quot;Password&quot;;</span><br><span class="line">  factory.HostName = &quot;address&quot;;</span><br><span class="line">  using (var connection = factory.CreateConnection())//创建连接</span><br><span class="line">    &#123;</span><br><span class="line">        using (var channel = connection.CreateModel())//创建信道</span><br><span class="line">           &#123;</span><br><span class="line">                   //创建队列  队列名 是否持久化 是否唯一 是否自动删除  参数列表</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       string msg = this.textBox1.Text.Trim()+&quot;&quot;+i;</span><br><span class="line">                       //rabbitmq发送二进制数据</span><br><span class="line">                       var body = Encoding.UTF8.GetBytes(msg);</span><br><span class="line">                       //发送消息 exchange 交换器  routingKey  路由 </span><br><span class="line">                       channel.BasicPublish(exchange: &quot;&quot;, routingKey: &quot;hello&quot;, basicProperties: null, body: body);</span><br><span class="line">                       this.textBox2.Text += msg + &quot;发送成功!\r\n&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="消费者步骤"><a href="#消费者步骤" class="headerlink" title="消费者步骤"></a>消费者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列 此处的队列名必须与生产者的队列名相同</li><li>创建事件驱动的消费者类型，绑定消费 EventingBasicConsumer</li><li>阻塞获取消息</li><li>指定消费队列 BasicConsume</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">           var factory = new ConnectionFactory();</span><br><span class="line">           factory.UserName = &quot;admin&quot;;</span><br><span class="line">           factory.Password = &quot;admin&quot;;</span><br><span class="line">           factory.HostName = &quot;116.196.76.89&quot;;</span><br><span class="line"></span><br><span class="line">           //创建连接</span><br><span class="line">           using (var connection = factory.CreateConnection())</span><br><span class="line">           &#123;//创建信道</span><br><span class="line">               using (var channel = connection.CreateModel())</span><br><span class="line">               &#123;</span><br><span class="line">                   //申明队列</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   //创建事件驱动的消费者类型，绑定消费</span><br><span class="line">                   var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                   //阻塞获取消息</span><br><span class="line">                   consumer.Received += (model, ea) =&gt;</span><br><span class="line">                   &#123;</span><br><span class="line">                       var body = ea.Body;</span><br><span class="line">                       var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                       Console.WriteLine(&quot; 我是消费者我接收到消息： &#123;0&#125;&quot;, message);</span><br><span class="line">                   &#125;;</span><br><span class="line"></span><br><span class="line">                   //指定消费队列</span><br><span class="line">                   channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">                                        autoAck: true,</span><br><span class="line">                                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                   Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">              </span><br><span class="line">                   Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq基本概念</title>
      <link href="/2018/04/18/rabbitmq1/"/>
      <url>/2018/04/18/rabbitmq1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。<br><a id="more"></a> </excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h4 id="rabbitmq基本概念"><a href="#rabbitmq基本概念" class="headerlink" title="rabbitmq基本概念"></a>rabbitmq基本概念</h4><ol><li><p>什么是rabbitmq </p><blockquote><p> Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。</p></blockquote></li><li><p>为什么使用mq?</p><blockquote><p> 场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种1.串行的方式;2.并行的方式<br>(1)串行方式:将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没 有必要等待的东西<br> <img src="https://img-blog.csdn.net/20170209145852454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p></blockquote></li></ol><p>实际上我们并不需要知道短信是否发送成功,因为我们在发送短信时只需要将对应的参数传给调用的第三方服务发送即可.如果第三方短信平台因为网络或者其他问题,导致无法返回响应结果,程序也就在这里阻塞而无法操作.</p><ol start="3"><li>解决 <blockquote><p>引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理,通过消息队列在去执行发送功能</p></blockquote></li></ol><p><strong>关于mq的相关概念可以去查看官方文档 这里不再过多阐述</strong></p><p><strong>以下是自己的理解,如有不对,还请纠正,谢谢! </strong></p><ul><li>生成者  用于发送消息的程序</li><li>消费者  用于消费消息的程序</li><li>队列 暂存消息的缓存区<blockquote><p>rabbitmq的核心思想是 生成者不直接发送任何消息到队列,而实际上生产者并不知道 消息是否会被传送到队列.相反 ,生产者只能将信息发送到exchange交换器中,而交换机负责接收生产者发送的消息,并且将消息发送到指定的队列</p></blockquote></li><li>消息交换机type的类型 创建交换机时需要channel.ExchangeDeclare(name, type,true,false,null);<ul><li>direct 直接的</li><li>Topic  主题</li><li>Headers 标题</li><li>Fanout  分列</li></ul></li></ul><blockquote><p>Direct Exchange – 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。<br>如果一个队列绑定到该交换机上要求路由键 “key”，则只有被标记为“key”的消息才被转发，只会转发key</p></blockquote><blockquote><p>Topic Exchange将路由值与某种模式进行匹配,此时队列需要绑定在一个模式上.符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.</em>” 只会匹配到“audit.irs”。  <a href="http://www.cnblogs.com/lrzr/p/7365731.html" target="_blank" rel="noopener">传送门</a></p></blockquote><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>identityserver</title>
      <link href="/2018/04/18/identityserver/"/>
      <url>/2018/04/18/identityserver/</url>
      <content type="html"><![CDATA[<h1 id="identity-server-4"><a href="#identity-server-4" class="headerlink" title="identity server 4"></a>identity server 4</h1>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> .net core </category>
          
          <category> identity server4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> identity server4 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
