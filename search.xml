<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>identity server4 客服端模式认证</title>
      <link href="/2018/04/18/identityserver/"/>
      <url>/2018/04/18/identityserver/</url>
      <content type="html"><![CDATA[<h1 id="identity-server-4"><a href="#identity-server-4" class="headerlink" title="identity server 4"></a>identity server 4</h1><p><excrept inindex="" |="" 首页摘要=""></excrept></p><ol><li>使用vscode创建项目<blockquote><p>首先vscode安装c# nugget扩展<br>cd到需要创建项目的目录 执行命令<br>dotnet new webapi –name IdentityCenter</p></blockquote></li><li>添加identityserver4引用<blockquote><p> vscode下按住 ctrl+p 选中nugget add package ,输入       identityserver,选择安装 ,安装后点击restore</p></blockquote></li></ol><blockquote><p>  cd到创建的项目目录下,重新加载项目,否则命名空间无法出现智能提示 cd .\IdentityCenter\  执行命令 dotnet restore</p></blockquote><ol start="3"><li>添加identityserver中间件并使用<blockquote><p>首先starup中ConfigureServices方法启用中间件</p><a id="more"></a></blockquote><the rest="" of="" contents="" |="" 余下全文=""></the></li><li>使用vscode创建项目<blockquote><p>首先vscode安装c# nugget扩展<br>cd到需要创建项目的目录 执行命令<br>dotnet new webapi –name IdentityCenter</p></blockquote></li><li>添加identityserver4引用<blockquote><p> vscode下按住 ctrl+p 选中nugget add package ,输入       identityserver,选择安装 ,安装后点击restore</p></blockquote></li></ol><blockquote><p>  cd到创建的项目目录下,重新加载项目,否则命名空间无法出现智能提示 cd .\IdentityCenter\  执行命令 dotnet restore</p></blockquote><ol start="3"><li>添加identityserver中间件并使用<blockquote><p>首先starup中ConfigureServices方法启用中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//添加identityserver中间件</span><br><span class="line">services.AddIdentityServer()</span><br><span class="line">.AddDeveloperSigningCredential();</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>在Configure方法中启用中间件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Program.cs中设置启动端口为5000</span><br></pre></td></tr></table></figure></p></blockquote><pre><code> public static IWebHost BuildWebHost(string[] args) =&gt;        WebHost.CreateDefaultBuilder(args)            .UseStartup&lt;Startup&gt;()            .UseUrls(&quot;http://localhost:5000&quot;)//设置启动端口为5000            .Build();}</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 在根目录创建config.cs文件,定义api和resource</span><br></pre></td></tr></table></figure><p>using System.Collections;<br>using System.Collections.Generic;<br>using IdentityServer4.Models;</p><p>namespace IdentityCenter<br>{</p><pre><code>public class config{    ///获取所有的api集合    public static IEnumerable&lt;ApiResource&gt; GetResource()    {        return new List&lt;ApiResource&gt;{        new ApiResource(&quot;api&quot;,&quot;My Api&quot;)    };    }    /// &lt;summary&gt;    /// 获取所有客户端    /// &lt;/summary&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public static IEnumerable&lt;Client&gt; GetClients()    {        return new List&lt;Client&gt;{     new Client{           ClientId=&quot;client&quot;,//当前客户端id           AllowedGrantTypes=GrantTypes.ClientCredentials,//使用客服端方式           ClientSecrets={              new Secret(&quot;Secret&quot;.Sha256())            },            AllowedScopes={&quot;api&quot;}//指定可以访问的api 与上个方法定义的一致     } };    }}</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">5. 在starup.cs中配置添加config方法</span><br></pre></td></tr></table></figure><p> public void ConfigureServices(IServiceCollection services)<br>        {<br>            //添加identityserver中间件<br>            services.AddIdentityServer()<br>            .AddDeveloperSigningCredential()<br>            .AddInMemoryApiResources(config.GetResource())//添加config.cs中定义的客户端和服务端<br>            .AddInMemoryClients(config.GetClients());<br>            //添加mvc中间件<br>            services.AddMvc();<br>        }<br><code>`</code></p><ol start="6"><li>执行命令 dotnet run启动项目 访问<a href="http://localhost:5000/.well-known/openid-configuration可以看到生成的对应模式密码" target="_blank" rel="noopener">http://localhost:5000/.well-known/openid-configuration可以看到生成的对应模式密码</a></li></ol>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> .net core </category>
          
          <category> identity server4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> identity server4 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core中授权认证1 使用Cookie-based认证实现</title>
      <link href="/2017/12/25/core1/"/>
      <url>/2017/12/25/core1/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>.net core中授权认证1 使用Cookie-based认证实现<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><ul><li><p>在项目Startup.cs中添加cookie认证支持</p><blockquote><p>在 ConfigureServices(IServiceCollection services)方法中添加认证中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//添加Cookie-based认证实现 </span><br><span class="line">           services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)</span><br><span class="line">               .AddCookie(Options=&gt; &#123;</span><br><span class="line">                   Options.LoginPath = &quot;/api/account/login&quot;;//表示授权时登录的地址</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>在Configure方法中启用中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//启用Cookie-based认证 在UseMvc之前</span><br><span class="line"> app.UseAuthentication();</span><br></pre></td></tr></table></figure></li><li><p>新建一个admin控制器,并在方法上加上授权标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Produces(&quot;application/json&quot;)]</span><br><span class="line"> [Route(&quot;api/admin&quot;)]</span><br><span class="line"> [Authorize]</span><br><span class="line"> public class adminController : Controller</span><br><span class="line"> &#123;</span><br><span class="line">     [HttpGet]</span><br><span class="line">     public IActionResult admin() &#123;</span><br><span class="line">         return Ok(new string[] &#123;&quot;Ethan&quot;,&quot;jac&quot; &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>新建account控制器,添加授权代码 </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Produces(&quot;application/json&quot;)]</span><br><span class="line">[Route(&quot;api/account&quot;)]</span><br><span class="line">public class accountController : Controller</span><br><span class="line">&#123;</span><br><span class="line"> /// &lt;summary&gt;</span><br><span class="line"> /// 登录方法</span><br><span class="line"> /// &lt;/summary&gt;</span><br><span class="line"> /// &lt;param name=&quot;ReturnUrl&quot;&gt;&lt;/param&gt;</span><br><span class="line"> /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    [HttpGet(&quot;login&quot;)]</span><br><span class="line">    public IActionResult login(string ReturnUrl) &#123;</span><br><span class="line"></span><br><span class="line">        //模拟用户登录 这里为用户的身份票据</span><br><span class="line">        var claims = new List&lt;Claim&gt; &#123;</span><br><span class="line">             new Claim(ClaimTypes.Name,&quot;Ethan&quot;),</span><br><span class="line">             new Claim(ClaimTypes.Role,&quot;admin&quot;)</span><br><span class="line">        &#125;;</span><br><span class="line">        //将票据加入到identity</span><br><span class="line">        var claimIdentity = new ClaimsIdentity(claims,CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class="line">        //注册identity</span><br><span class="line">        HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,new ClaimsPrincipal(claimIdentity));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return Ok(new string []&#123;&quot;s&quot;, ReturnUrl &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 注销登录 清除cookie</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    [HttpGet(&quot;LoginOut&quot;)]</span><br><span class="line">    public IActionResult LoginOut() &#123;</span><br><span class="line">        HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class="line">        return Ok(&quot;&#123;\&quot;msg\&quot;:\&quot;注销成功\&quot;&#125;&quot;);</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> .net core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core webapi使用swagger生成api帮助文档</title>
      <link href="/2017/12/21/webapi2/"/>
      <url>/2017/12/21/webapi2/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>.net core webapi使用swagger生成api帮助文档<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><h4 id="此篇文章接上一篇"><a href="#此篇文章接上一篇" class="headerlink" title="此篇文章接上一篇"></a>此篇文章接上一篇</h4><ul><li>安装依赖 <code>Install-Package NSwag.AspNetCore</code></li><li><p>在该Startup.Configure方法中，启用用于提供生成的Swagger规范和Swagger UI的中间件：</p><blockquote><p>  app.UseStaticFiles();</p></blockquote><p>   app.UseSwaggerUi(typeof(Startup).GetTypeInfo().Assembly, settings =&gt;</p><pre><code>{    //可在 GeneratorSettings设置相应的描述信息    settings.GeneratorSettings.DefaultPropertyNameHandling = PropertyNameHandling.CamelCase;    settings.GeneratorSettings.Description = &quot;测试nswag&quot;;    settings.GeneratorSettings.Title = &quot;my Nswag&quot;;    settings.GeneratorSettings.Version = &quot;2.0&quot;;    //settings.MiddlewareBasePath = &quot;localhost:5000:api/*&quot;;});</code></pre></li><li>右键  项目-&gt;属性 勾选xml选项</li><li><p>修改launchSettings.json,将默认地址修改为swagger</p></li><li><p>一般nswag是根据你的方法注释生成xml文档的 ,如果api方法中需要返回400 200等操作码时,应当这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 添加一个用户</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;remarks&gt;</span><br><span class="line">///  </span><br><span class="line">///     POST /User</span><br><span class="line">///     &#123;</span><br><span class="line">///        &quot;Age&quot;: &quot;年龄&quot;,</span><br><span class="line">///        &quot;Name&quot;: &quot;名称&quot;,</span><br><span class="line">///        &quot;Sex&quot;: &quot;性别</span><br><span class="line">///     &#125;</span><br><span class="line">/// </span><br><span class="line">/// &lt;/remarks&gt;</span><br><span class="line">/// &lt;param name=&quot;item&quot;&gt;用户的json对象&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;返回一个对象&lt;/returns&gt;</span><br><span class="line">/// &lt;response code=&quot;201&quot;&gt;返回新创建的项目&lt;/response&gt;</span><br><span class="line">/// &lt;response code=&quot;400&quot;&gt;如果item是null&lt;/response&gt;</span><br><span class="line">[HttpPost]</span><br><span class="line">[ProducesResponseType(typeof(User), 201)]</span><br><span class="line">[ProducesResponseType(typeof(User), 400)]</span><br><span class="line">[HttpPost]</span><br><span class="line">public IActionResult Post([FromBody]User item)</span><br><span class="line">&#123;</span><br><span class="line">    if (item == null)</span><br><span class="line">    &#123;</span><br><span class="line">        return BadRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    return Ok(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>其中 remarks节点指定一个返回体 </p></blockquote><p>运行生成此页面表示构建成功<br><img src="http://wx2.sinaimg.cn/large/006MNXdAgy1fqk3sbm8umj31br0jkwfd.jpg" alt="image"></p></the>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> webapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core webapi使用</title>
      <link href="/2017/12/21/webapi1/"/>
      <url>/2017/12/21/webapi1/</url>
      <content type="html"><![CDATA[<excrept in="" index="" |="" 摘要=""><p>什么是webapi 官方定义如下，强调两个关键点，即可以对接各种客户端（浏览器，移动设备），构建http服务的框架。</p><blockquote><p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API   is an ideal platform for building RESTful applications on the .NET Framework.</p></blockquote><p>Web API在ASP.NET完整框架中地位如下图，与SignalR一起同为构建Service的框架。Web API负责构建http常规服务，而SingalR主要负责的是构建实时服务，例如股票，聊天室，在线游戏等实时性要求比较高的服务。<br><img src="http://wx2.sinaimg.cn/large/006MNXdAgy1fqhx73nux2j30ic08ejsl.jpg" alt="图片"></p><p>Web API最重要的是可以构建面向各种客户端的服务。另外与WCF REST Service不同在于，Web API利用Http协议的各个方面来表达服务(例如 URI/request response header/caching/versioning/content format)，因此就省掉很多配置。</p><p><img src="https://ws1.sinaimg.cn/large/006MNXdAgy1fqhxauawy3j30cz07775o.jpg" alt="图片"></p><p>当你遇到以下这些情况的时候，就可以考虑使用Web API了。<br><a id="more"></a></p><the rest="" of="" contents="" |余下全文=""><h4 id="net-core-webapi使用"><a href="#net-core-webapi使用" class="headerlink" title=".net core webapi使用"></a>.net core webapi使用</h4><p>什么是webapi 官方定义如下，强调两个关键点，即可以对接各种客户端（浏览器，移动设备），构建http服务的框架。</p><blockquote><p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API   is an ideal platform for building RESTful applications on the .NET Framework.</p></blockquote><p>Web API在ASP.NET完整框架中地位如下图，与SignalR一起同为构建Service的框架。Web API负责构建http常规服务，而SingalR主要负责的是构建实时服务，例如股票，聊天室，在线游戏等实时性要求比较高的服务。<br><img src="http://wx2.sinaimg.cn/large/006MNXdAgy1fqhx73nux2j30ic08ejsl.jpg" alt="图片"></p><p>Web API最重要的是可以构建面向各种客户端的服务。另外与WCF REST Service不同在于，Web API利用Http协议的各个方面来表达服务(例如 URI/request response header/caching/versioning/content format)，因此就省掉很多配置。</p><p><img src="https://ws1.sinaimg.cn/large/006MNXdAgy1fqhxauawy3j30cz07775o.jpg" alt="图片"></p><ul><li>当你遇到以下这些情况的时候，就可以考虑使用Web API了。<ul><li>需要Web Service但是不需要SOAP</li><li>需要在已有的WCF服务基础上建立non-soap-based http服务</li><li>只想发布一些简单的Http服务，不想使用相对复杂的WCF配置</li><li>发布的服务可能会被带宽受限的设备访问</li><li>希望使用开源框架，关键时候可以自己调试或者自定义一下框架</li></ul></li></ul><h3 id="关于相关概念百度一下吧-下面开始使用web-api"><a href="#关于相关概念百度一下吧-下面开始使用web-api" class="headerlink" title="关于相关概念百度一下吧 ,下面开始使用web api"></a>关于相关概念百度一下吧 ,下面开始使用web api</h3><ul><li>新建 .net core application ,选中webapi</li></ul><p>url操作说明  </p><table><thead><tr><th>操作</th><th style="text-align:center">Http请求类型</th><th style="text-align:right">url表现形式 </th></tr></thead><tbody><tr><td>  Get contact list</td><td style="text-align:center">GET</td><td style="text-align:right">/api/contacts</td></tr><tr><td>Get filtered contacts</td><td style="text-align:center">GET</td><td style="text-align:right">/api/contacts?$top=2</td></tr><tr><td>Get contact by ID</td><td style="text-align:center">GET</td><td style="text-align:right">/api/contacts/id</td></tr><tr><td>Create new contact</td><td style="text-align:center">POST</td><td style="text-align:right">/api/contacts</td></tr><tr><td>Update a contact</td><td style="text-align:center">PUT</td><td style="text-align:right">/api/contacts/id</td></tr><tr><td>Delete a contact</td><td style="text-align:center">DELETE</td><td style="text-align:right">/api/contacts/id</td></tr></tbody></table><h4 id="实例如下"><a href="#实例如下" class="headerlink" title="实例如下"></a>实例如下</h4><ul><li>get请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class HomeController : Controller</span><br><span class="line">   &#123;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       [HttpGet,router(&quot;paged&quot;)]</span><br><span class="line">       public async  Task&lt;IEnumerable&lt;string&gt;&gt; Get()&#123;</span><br><span class="line"></span><br><span class="line">           await Task.Delay(500);</span><br><span class="line">           return new string []&#123;&quot;hvalue1&quot;,&quot;hvalue2&quot; &#125;;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       [HttpGet,router(&quot;&#123;id&#125;&quot;)]</span><br><span class="line">       public string Get(int id)</span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           return id + &quot;h&quot;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>说明 : 在一个控制器中有多个http请求相同的方法时,须指定其路由别名,否则会出现默认调用第一个的情况(踩过坑的)<br> router 给方法指定路由别名 .如果带参数的需要指定参数的名称,用{}包装 如router(“{id}”) </p></blockquote><ul><li>post请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> [HttpPost]</span><br><span class="line">public async Task&lt;IActionResult&gt; Post(Article article) &#123;</span><br><span class="line">    return Ok(article);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>值得注意的是:当在post请求指定为<code>public async Task&lt;IActionResult&gt; Post([FromBody] test test)</code> [FromBody] 序列化时,前端传入的是一个json字符串<br><img src="http://wx4.sinaimg.cn/large/006MNXdAgy1fqhycrdc0gj30pz0ep3yq.jpg" alt=""><br>当不指定为FromBody时,传入的是一个对象</p></blockquote><ul><li>delete请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[HttpDelete]</span><br><span class="line">   public async Task&lt;IActionResult&gt; Delete(string id) &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                var result = await dbContext.DeleteByAidAsync(&quot;linduBlog&quot;, id);</span><br><span class="line">                return Ok(result);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                return BadRequest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置跨域访问"><a href="#设置跨域访问" class="headerlink" title="设置跨域访问"></a>设置跨域访问</h3><p>在Startup文件中添加cors跨域,然后在controller上启用cors  [EnableCors(“any”)] //设置跨域访问</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">    &#123;</span><br><span class="line">        services.AddMvc();</span><br><span class="line"></span><br><span class="line">         services.AddCors(options=&gt; &#123;</span><br><span class="line">            options.AddPolicy(&quot;any&quot;,build=&gt; &#123;</span><br><span class="line">            build.AllowAnyMethod()</span><br><span class="line">            .AllowAnyHeader()</span><br><span class="line">            .AllowAnyOrigin()</span><br><span class="line">            .AllowCredentials();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里设置为AllowAnyMethod 表示所有的请求都能访问.当我们需要只允许某个服务访问时应在build处添加 <code>builder.WithOrigins(urls)</code>urls表示允许访问的服务地址</p></blockquote><h3 id="设置陀螺峰命名问题"><a href="#设置陀螺峰命名问题" class="headerlink" title="设置陀螺峰命名问题"></a>设置陀螺峰命名问题</h3><p>  在 core webapi中,当返回的类型数据包含大写时会自动转换为小写.此问题需要在stratup中AddJsonOptions方法配置<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvc()//去掉默认的将大写改为小写的功能</span><br><span class="line">        .AddJsonOptions(options =&gt; options.SerializerSettings.</span><br><span class="line">          ContractResolver = new DefaultContractResolver());</span><br></pre></td></tr></table></figure></p></the></excrept>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> webapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq4 fanout分列模式使用</title>
      <link href="/2017/12/19/rabbitmq4/"/>
      <url>/2017/12/19/rabbitmq4/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |首页摘要=""></excerpt></p><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote><p>场景 模拟接受email或sms消息</p><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>发送消息<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></li></ul><h4 id="rabbitmq4-fanout分列模式使用"><a href="#rabbitmq4-fanout分列模式使用" class="headerlink" title="rabbitmq4 fanout分列模式使用"></a>rabbitmq4 fanout分列模式使用</h4><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote><p>场景 模拟接受email或sms消息</p><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>发送消息</li></ul><h3 id="生产者程序"><a href="#生产者程序" class="headerlink" title="生产者程序"></a>生产者程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line"> var factory = new ConnectionFactory();</span><br><span class="line"> factory.UserName = &quot;&quot;;</span><br><span class="line"> factory.Password = &quot;&quot;;</span><br><span class="line"> factory.HostName = &quot;&quot;;</span><br><span class="line">   using (var connection=factory.CreateConnection())</span><br><span class="line">          &#123;</span><br><span class="line">              using (var channel=connection.CreateModel())</span><br><span class="line">              &#123;</span><br><span class="line">                  //创建fanout交换器</span><br><span class="line">                  channel.ExchangeDeclare(&quot;ex_fanout&quot;,ExchangeType.Fanout,true,false,null);</span><br><span class="line"></span><br><span class="line">                  for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                  &#123;</span><br><span class="line">                      var reamker = i % 2 == 0 ? &quot;sms&quot; : &quot;emai&quot;;</span><br><span class="line">                      var msg = Encoding.UTF8.GetBytes(this.textBox1.Text+ i.ToString());</span><br><span class="line">                      Console.WriteLine(&quot;内容:发送内容，&quot; + i);</span><br><span class="line">                      //创建队列</span><br><span class="line">                       channel.QueueDeclare(reamker,true,false,false,null);</span><br><span class="line">                      //绑定队列和交换器 不需要指定routingkey 但是不能为null,否则会报错</span><br><span class="line">                      channel.QueueBind(reamker,&quot;ex_fanout&quot;,&quot;&quot;,null);</span><br><span class="line">                    //不需要指定routingkey,指定了也没用.因为交换机是fanout类型</span><br><span class="line">                      channel.BasicPublish(&quot;ex_fanout&quot;, string.Empty, null, msg);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h5 id="特别注意上面’不需要指定routingkey地方’-当我将routingkey的参数值设置为null时会报未将对象引用到实例错误-需要改为””-或者string-empty”"><a href="#特别注意上面’不需要指定routingkey地方’-当我将routingkey的参数值设置为null时会报未将对象引用到实例错误-需要改为””-或者string-empty”" class="headerlink" title="特别注意上面’不需要指定routingkey地方’,当我将routingkey的参数值设置为null时会报未将对象引用到实例错误.需要改为”” 或者string.empty”"></a>特别注意上面’不需要指定routingkey地方’,当我将routingkey的参数值设置为null时会报未将对象引用到实例错误.需要改为”” 或者string.empty”</h5><h3 id="消费者程序实现"><a href="#消费者程序实现" class="headerlink" title="消费者程序实现"></a>消费者程序实现</h3><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>消费消息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line"></span><br><span class="line">         var factory = new ConnectionFactory();</span><br><span class="line">         factory.UserName = &quot;&quot;;</span><br><span class="line">         factory.Password = &quot;&quot;;</span><br><span class="line">         factory.HostName = &quot;&quot;;</span><br><span class="line">         while (true)</span><br><span class="line">         &#123;</span><br><span class="line">             Console.WriteLine(&quot;请选择登陆：1邮箱，2短信?&quot;);</span><br><span class="line">             string input = Console.ReadLine();</span><br><span class="line">             if (input == &quot;1&quot; || input == &quot;2&quot;)</span><br><span class="line">             &#123;</span><br><span class="line">                 var queueName = input == &quot;1&quot; ? &quot;sms&quot; : &quot;emai&quot;;</span><br><span class="line"></span><br><span class="line">                 using (var connection = factory.CreateConnection())</span><br><span class="line">                 &#123;</span><br><span class="line">                     using (var channel = connection.CreateModel())</span><br><span class="line">                     &#123;</span><br><span class="line">                         //指定队列</span><br><span class="line">                         channel.QueueDeclare(queueName,true,false,false,null);</span><br><span class="line">                         //指定交换器</span><br><span class="line">                         channel.ExchangeDeclare(&quot;ex_fanout&quot;,ExchangeType.Fanout,true,false,null);</span><br><span class="line">                         //绑定交换器 当交换器为fanout时不需指定路由 </span><br><span class="line">                         channel.QueueBind(queueName, &quot;ex_fanout&quot;,string.Empty,null);</span><br><span class="line"></span><br><span class="line">                         var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                         consumer.Received += (model,eva)=&gt; &#123;</span><br><span class="line">                             var msg = Encoding.UTF8.GetString(eva.Body);</span><br><span class="line">                             Console.WriteLine(queueName + &quot;显示结果：&quot; + msg);</span><br><span class="line">                         &#125;;</span><br><span class="line">                         //指定消费队列</span><br><span class="line">                         channel.BasicConsume(queueName, true, consumer);</span><br><span class="line">                         Console.ReadKey();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>fanout特点: 　所有发送到Fanout Exchange的消息都会被转发到与该Exchange 绑定(Binding)的所有Queue上。  从上诉实例中我们先申明了一个ex_fanout的交换器 ,而在生产者程序中我们判断i%2是否等于0来指定队列为”sms”或者 “emai”,而这时候不管队列为sms或则email都已经绑定在ex_fanout交换器上,而Fanout Exchange又把消息分发到所有与他绑定的队列中,所以最后的结果都是100条消息</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq3 一个生产者 多个消费者</title>
      <link href="/2017/12/19/rabbitmq3/"/>
      <url>/2017/12/19/rabbitmq3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |首页摘要=""><br>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化</excerpt></p><h3 id="生产者步骤"><a href="#生产者步骤" class="headerlink" title="生产者步骤"></a>生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列</li><li>申明交换器 ExchangeDeclare</li><li>将队列与交换器绑定 QueueBind</li><li>创建属性 设置消息持久化 Persistent</li><li>发送消息到队列并指定消息持久化类型 basicProperties<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h4 id="使用一个生产者-多个消费时需要将队列与路由交换器绑定-并设置消息持久化"><a href="#使用一个生产者-多个消费时需要将队列与路由交换器绑定-并设置消息持久化" class="headerlink" title="使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化"></a>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化</h4></the></li></ul><blockquote><p>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化 </p></blockquote><h3 id="生产者步骤-1"><a href="#生产者步骤-1" class="headerlink" title="生产者步骤"></a>生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列</li><li>申明交换器 ExchangeDeclare</li><li>将队列与交换器绑定 QueueBind</li><li>创建属性 设置消息持久化 Persistent</li><li>发送消息到队列并指定消息持久化类型 basicProperties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line">           var factory = new ConnectionFactory();</span><br><span class="line">           factory.UserName = &quot;UserName&quot;;</span><br><span class="line">           factory.Password = &quot;UserName&quot;;</span><br><span class="line">           factory.HostName = &quot;&quot;;</span><br><span class="line">           using (var connection = factory.CreateConnection())//创建连接</span><br><span class="line">           &#123;</span><br><span class="line">               using (var channel = connection.CreateModel())//创建信道</span><br><span class="line">               &#123;</span><br><span class="line">                   //创建队列  队列名 是否持久化 是否唯一 是否自动删除  参数列表</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   //创建交换器  交换器名称  类型 是否持久化  是否自动删除 其他参数</span><br><span class="line">                   channel.ExchangeDeclare(&quot;ex_hello&quot;, &quot;direct&quot;,true,false,null);</span><br><span class="line"></span><br><span class="line">                   //将队列与交换器绑定 队列名 交换器名 路由名</span><br><span class="line">                   channel.QueueBind(&quot;hello&quot;,&quot;ex_hello&quot;, &quot;Exchange_hello&quot;);</span><br><span class="line"></span><br><span class="line">                   //内容的基本属性</span><br><span class="line">                   var properties = channel.CreateBasicProperties();</span><br><span class="line">                   //设置消息内容持久化</span><br><span class="line">                    properties.Persistent = true;</span><br><span class="line"></span><br><span class="line">                   for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       string msg = this.textBox1.Text.Trim()+&quot;&quot;+i;</span><br><span class="line">                       //rabbitmq发送二进制数据</span><br><span class="line">                       var body = Encoding.UTF8.GetBytes(msg);</span><br><span class="line">                       //发送消息 exchange 交换器  routingKey  路由 </span><br><span class="line">                       channel.BasicPublish(exchange: &quot;ex_hello&quot;, routingKey: &quot;Exchange_hello&quot;, basicProperties: properties, body: body);</span><br><span class="line"></span><br><span class="line">                       this.textBox2.Text += msg + &quot;发送成功!\r\n&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                 </span><br><span class="line"></span><br><span class="line">              </span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列 此处的队列名必须与生产者的队列名相同</li><li>创建交换器 与生产者交换器名字相同</li><li>将队列与交换器绑定 </li><li>设置公平分发 同一时间只处理一个消息</li><li>创建事件驱动的消费者类型，绑定消费 EventingBasicConsumer</li><li>阻塞获取消息</li><li>指定消费队列 BasicConsume</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">            var factory = new ConnectionFactory();</span><br><span class="line">            factory.UserName = &quot;admin&quot;;</span><br><span class="line">            factory.Password = &quot;admin&quot;;</span><br><span class="line">            factory.HostName = &quot;116.196.76.89&quot;;</span><br><span class="line"></span><br><span class="line">            //创建连接</span><br><span class="line">            using (var connection = factory.CreateConnection())</span><br><span class="line">            &#123;//创建信道</span><br><span class="line">                using (var channel = connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    //申明队列</span><br><span class="line">                    channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line"></span><br><span class="line">                    //申明交换器</span><br><span class="line">                    channel.ExchangeDeclare(&quot;ex_hello&quot;, &quot;direct&quot;, true, false, null);</span><br><span class="line">                    //绑定交换器</span><br><span class="line">                    channel.QueueBind(&quot;hello&quot;, &quot;ex_hello&quot;, &quot;Exchange_hello&quot;);</span><br><span class="line"></span><br><span class="line">                    //公平分发 同一时间只处理一个消息</span><br><span class="line">                     channel.BasicQos(0, 1, true);</span><br><span class="line"></span><br><span class="line">                    //创建事件驱动的消费者类型，绑定消费</span><br><span class="line">                    var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                    //阻塞获取消息</span><br><span class="line">                    consumer.Received += (model, ea) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body = ea.Body;</span><br><span class="line">                        var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                        Console.WriteLine(&quot; 我是消费者我接收到消息： &#123;0&#125;&quot;, message);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    //指定消费队列</span><br><span class="line">                    channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">                                         autoAck: true,</span><br><span class="line">                                         consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line"></span><br><span class="line">                    Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq2 在c#中简单使用rabbitmq 实现生产者和消费者</title>
      <link href="/2017/12/18/rabbitmq2/"/>
      <url>/2017/12/18/rabbitmq2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><blockquote><p>要使用rabbitmq,必须先安装它.安装教程网上很多这里直接略过.</p></blockquote><ul><li>新建c#控制台项目,添加Rabbitmq.Client.dll引用  管理nuget包搜索 <code>Rabbitmq.Client</code><a id="more"></a></li></ul><the rest="" of="" contents="" |="" 余下全文=""><h3 id="创建生产者步骤"><a href="#创建生产者步骤" class="headerlink" title="创建生产者步骤"></a>创建生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂</li><li>通过工厂获取连接connection</li><li>创建信道</li><li>申明队列</li><li><p>发送消息到队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line">  var factory = new ConnectionFactory();</span><br><span class="line">  factory.UserName = &quot;UserName&quot;;</span><br><span class="line">  factory.Password = &quot;Password&quot;;</span><br><span class="line">  factory.HostName = &quot;address&quot;;</span><br><span class="line">  using (var connection = factory.CreateConnection())//创建连接</span><br><span class="line">    &#123;</span><br><span class="line">        using (var channel = connection.CreateModel())//创建信道</span><br><span class="line">           &#123;</span><br><span class="line">                   //创建队列  队列名 是否持久化 是否唯一 是否自动删除  参数列表</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       string msg = this.textBox1.Text.Trim()+&quot;&quot;+i;</span><br><span class="line">                       //rabbitmq发送二进制数据</span><br><span class="line">                       var body = Encoding.UTF8.GetBytes(msg);</span><br><span class="line">                       //发送消息 exchange 交换器  routingKey  路由 </span><br><span class="line">                       channel.BasicPublish(exchange: &quot;&quot;, routingKey: &quot;hello&quot;, basicProperties: null, body: body);</span><br><span class="line">                       this.textBox2.Text += msg + &quot;发送成功!\r\n&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="消费者步骤"><a href="#消费者步骤" class="headerlink" title="消费者步骤"></a>消费者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列 此处的队列名必须与生产者的队列名相同</li><li>创建事件驱动的消费者类型，绑定消费 EventingBasicConsumer</li><li>阻塞获取消息</li><li>指定消费队列 BasicConsume</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">           var factory = new ConnectionFactory();</span><br><span class="line">           factory.UserName = &quot;admin&quot;;</span><br><span class="line">           factory.Password = &quot;admin&quot;;</span><br><span class="line">           factory.HostName = &quot;116.196.76.89&quot;;</span><br><span class="line"></span><br><span class="line">           //创建连接</span><br><span class="line">           using (var connection = factory.CreateConnection())</span><br><span class="line">           &#123;//创建信道</span><br><span class="line">               using (var channel = connection.CreateModel())</span><br><span class="line">               &#123;</span><br><span class="line">                   //申明队列</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   //创建事件驱动的消费者类型，绑定消费</span><br><span class="line">                   var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                   //阻塞获取消息</span><br><span class="line">                   consumer.Received += (model, ea) =&gt;</span><br><span class="line">                   &#123;</span><br><span class="line">                       var body = ea.Body;</span><br><span class="line">                       var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                       Console.WriteLine(&quot; 我是消费者我接收到消息： &#123;0&#125;&quot;, message);</span><br><span class="line">                   &#125;;</span><br><span class="line"></span><br><span class="line">                   //指定消费队列</span><br><span class="line">                   channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">                                        autoAck: true,</span><br><span class="line">                                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                   Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">              </span><br><span class="line">                   Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq基本概念</title>
      <link href="/2017/12/18/rabbitmq1/"/>
      <url>/2017/12/18/rabbitmq1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。<br><a id="more"></a> </excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h4 id="rabbitmq基本概念"><a href="#rabbitmq基本概念" class="headerlink" title="rabbitmq基本概念"></a>rabbitmq基本概念</h4><ol><li><p>什么是rabbitmq </p><blockquote><p> Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。</p></blockquote></li><li><p>为什么使用mq?</p><blockquote><p> 场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种1.串行的方式;2.并行的方式<br>(1)串行方式:将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没 有必要等待的东西<br> <img src="https://ws1.sinaimg.cn/large/006MNXdAgy1fqhx1kc5mdj30sm083dgd.jpg" alt=""></p></blockquote></li></ol><p>实际上我们并不需要知道短信是否发送成功,因为我们在发送短信时只需要将对应的参数传给调用的第三方服务发送即可.如果第三方短信平台因为网络或者其他问题,导致无法返回响应结果,程序也就在这里阻塞而无法操作.</p><ol start="3"><li>解决 <blockquote><p>引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理,通过消息队列在去执行发送功能</p></blockquote></li></ol><p><strong>关于mq的相关概念可以去查看官方文档 这里不再过多阐述</strong></p><p><strong>以下是自己的理解,如有不对,还请纠正,谢谢! </strong></p><ul><li>生成者  用于发送消息的程序</li><li>消费者  用于消费消息的程序</li><li>队列 暂存消息的缓存区<blockquote><p>rabbitmq的核心思想是 生成者不直接发送任何消息到队列,而实际上生产者并不知道 消息是否会被传送到队列.相反 ,生产者只能将信息发送到exchange交换器中,而交换机负责接收生产者发送的消息,并且将消息发送到指定的队列</p></blockquote></li><li>消息交换机type的类型 创建交换机时需要channel.ExchangeDeclare(name, type,true,false,null);<ul><li>direct 直接的</li><li>Topic  主题</li><li>Headers 标题</li><li>Fanout  分列</li></ul></li></ul><blockquote><p>Direct Exchange – 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。<br>如果一个队列绑定到该交换机上要求路由键 “key”，则只有被标记为“key”的消息才被转发，只会转发key</p></blockquote><blockquote><p>Topic Exchange将路由值与某种模式进行匹配,此时队列需要绑定在一个模式上.符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.</em>” 只会匹配到“audit.irs”。  <a href="http://www.cnblogs.com/lrzr/p/7365731.html" target="_blank" rel="noopener">传送门</a></p></blockquote><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuejs学习3</title>
      <link href="/2017/11/07/vue3/"/>
      <url>/2017/11/07/vue3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |摘要=""><br> 简单介绍vue2.0的过滤器等选项操作.</excerpt></p><p> Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：<br> <a id="more"></a></p><the rest="" of="" contents|="" 余下全文=""><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>场景 :将价格格式化为货币形式 （￥100元）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> var vue = new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &quot;hello word&quot;,</span><br><span class="line">                order: [</span><br><span class="line">                    &#123; name: &quot;苹果&quot;, price: 100 &#125;,</span><br><span class="line">                    &#123; name: &quot;梨子&quot;, price: 150 &#125;,</span><br><span class="line">                    &#123; name: &quot;香蕉&quot;, price: 170 &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            filters: &#123;</span><br><span class="line">                filterPrice(obj,name) &#123;//这里还可以传入参数 </span><br><span class="line">                    return obj + &quot;元/10斤&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">           </span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;li v-for=&quot;item in order&quot;&gt;</span><br><span class="line">       &lt;span&gt; &#123;&#123;item.name&#125;&#125; -- &#123;&#123;item.price | filterPrice&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h4 id="将上诉方法改造一下-判断当前的商品是否为苹果-如果是-显示为无价"><a href="#将上诉方法改造一下-判断当前的商品是否为苹果-如果是-显示为无价" class="headerlink" title="将上诉方法改造一下,判断当前的商品是否为苹果,如果是,显示为无价"></a>将上诉方法改造一下,判断当前的商品是否为苹果,如果是,显示为无价</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">         filters: &#123;</span><br><span class="line">               filterPrice(obj,name) &#123;//传入额外参数name值</span><br><span class="line">                   console.info(name);</span><br><span class="line">                   if(name==&apos;苹果&apos;)&#123;</span><br><span class="line">                       return &apos;不好意思,无价&apos;;</span><br><span class="line">                   &#125;else&#123;</span><br><span class="line">                       return obj + &quot;元/10斤&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">&lt;li v-for=&quot;item in order&quot;&gt;</span><br><span class="line">   &lt;span&gt; &#123;&#123;item.name&#125;&#125; -- &#123;&#123;item.price | filterPrice(item.name)&#125;&#125; &lt;/span&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意一点 filterPrice第一个参数默认就是 | 之前的值 这里obj默认就为item.price ,所以obj参数我们不用传,只用传第二个参数</p></blockquote><h3 id="Methods-Option-方法选项-用于定义方法"><a href="#Methods-Option-方法选项-用于定义方法" class="headerlink" title="Methods Option  方法选项 (用于定义方法)"></a>Methods Option  方法选项 (用于定义方法)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &#123;&#123; a &#125;&#125;</span><br><span class="line">       &lt;p&gt;&lt;button @click=&quot;add&quot;&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       var app=new Vue(&#123;</span><br><span class="line">           el:&apos;#app&apos;,</span><br><span class="line">           data:&#123;</span><br><span class="line">               a:1</span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               add:function(event)&#123;//绑定click事件方法 </span><br><span class="line">                   this.a++</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>同样,methods中都可以传入参数,这里跟jq中没什么变化 ,当绑定事件add是不传任何参数,那么event代表的就是this变量,也就是click事件变量<br><img src="http://ws1.sinaimg.cn/large/006MNXdAgy1fqixnusd6fj30eq0mfjsr.jpg" alt="image"><br>从图中即可看出</p></blockquote><h3 id="Watch-监控数据变化"><a href="#Watch-监控数据变化" class="headerlink" title="Watch  监控数据变化"></a>Watch  监控数据变化</h3><p><img src="http://ws1.sinaimg.cn/large/006MNXdAgy1fqixsgh7l9g308606hjs4.gif" alt="image"></p><blockquote><p>当温度减少是显示该穿什么衣服</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var suggestion=[&apos;T恤短袖&apos;,&apos;夹克长裙&apos;,&apos;棉衣羽绒服&apos;];</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                temperature:14,</span><br><span class="line">                suggestion:&apos;夹克长裙&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add:function()&#123;</span><br><span class="line">                    this.temperature+=5;</span><br><span class="line">                &#125;,</span><br><span class="line">                reduce:function()&#123;</span><br><span class="line">                    this.temperature-=5;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line">                temperature:function(newVal,oldVal)&#123;</span><br><span class="line">                    if(newVal&gt;=26)&#123;</span><br><span class="line">                        this.suggestion=suggestion[0];</span><br><span class="line">                    &#125;else if(newVal&lt;26 &amp;&amp; newVal &gt;=0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.suggestion=suggestion[1];</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        this.suggestion=suggestion[2];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p&gt;今日温度：&#123;&#123;temperature&#125;&#125;°C&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;穿衣建议:&#123;&#123;this.suggestion&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;button @click=&quot;add&quot;&gt;添加温度&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;reduce&quot;&gt;减少温度&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>watch 是监控属性变化的 ,也就是说在上诉实例中watch下面的temperature是属性,对应的是data中的temperature属性,这里就是监控他 </p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuejs学习2</title>
      <link href="/2017/11/07/vue2/"/>
      <url>/2017/11/07/vue2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |摘要=""><br> 简单介绍vue2.0的生命周期和钩子函数<br> <a id="more"></a></excerpt></p><the rest="" of="" contents|="" 余下全文=""><p>先来两张图理解下</p><p><img src="https://segmentfault.com/img/bVEo3w?w=1200&amp;h=2800" alt=""><br><img src="https://segmentfault.com/img/bVEs9x?w=847&amp;h=572" alt=""></p><p>编写下面代码执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/vue/2.1.3/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    </span><br><span class="line">  var app = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">          message : &quot;xuxiao is boy&quot; </span><br><span class="line">      &#125;,</span><br><span class="line">       beforeCreate: function () &#123;</span><br><span class="line">                console.group(&apos;beforeCreate 创建前状态===============》&apos;);</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot; , &quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //undefined </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)  </span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            console.group(&apos;created 创建完毕状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化 </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: function () &#123;</span><br><span class="line">            console.group(&apos;beforeMount 挂载前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + (this.$el)); //已被初始化</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化  </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化  </span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function () &#123;</span><br><span class="line">            console.group(&apos;mounted 挂载结束状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //已被初始化</span><br><span class="line">            console.log(this.$el);    </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化 </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: function () &#123;</span><br><span class="line">            console.group(&apos;beforeUpdate 更新前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);   </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        updated: function () &#123;</span><br><span class="line">            console.group(&apos;updated 更新完成状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: function () &#123;</span><br><span class="line">            console.group(&apos;beforeDestroy 销毁前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);    </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123;</span><br><span class="line">            console.group(&apos;destroyed 销毁完成状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);  </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 本人在开发中主要用到一下几个 :<code>beforeCreate</code>生命周期是组件刚刚被创建,但是属性还没有计算,这时候我们去访问vue实例的属性是不存在的,提示undefind.<br><code>created</code>是组件和属性均已完成,但是还未加载到dom上.<br><code>mounted</code>模板已经编译并且以挂载.<br>比如,我们现在有个场景,在数据加载的时候显示加载动画,加载成功后关闭加载动画,显示加载的数据.这里就需要用到<code>created</code>和 <code>mounted</code>来节后,当组件为 <code>created</code>时显示动画,组件为 <code>mounted</code>已经挂载到dom时关闭动画,并显示数据.当然,你也可以在 <code>beforecreate</code>中去执行动画,看具体的需求.<br><code>update</code>表示在为vue实例属性更新值时执行<br><code>beforeDestroy</code>： 你确认删除XX吗？ destroyed ：当前组件已被删除，清空相关内容</p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuejs学习1</title>
      <link href="/2017/11/07/vue1/"/>
      <url>/2017/11/07/vue1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |摘要=""><br> Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：<br> <a id="more"></a></excerpt></p><the rest="" of="" contents|="" 余下全文=""><h3 id="vue简单实用"><a href="#vue简单实用" class="headerlink" title="vue简单实用"></a>vue简单实用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Helloworld&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                message:&apos;hello Vue!&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-v-else-v-show-指令"><a href="#v-if-v-else-v-show-指令" class="headerlink" title="v-if  v-else  v-show 指令"></a>v-if  v-else  v-show 指令</h3><p>v-if:是vue 的一个内部指令，指令用在我们的html中。<br><br>v-if用来判断是否加载html的DOM，比如我们模拟一个用户登录状态，在用户登录后显示用户名称。</p><br>html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;v-if &amp; v-show &amp; v-else&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;v-if 判断是否加载&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div v-if=&quot;isLogin&quot;&gt;hello word&lt;/div&gt;</span><br><span class="line">        &lt;div v-else&gt;请登录后操作&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">               isLogin:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br><br>&gt; 这里我们在vue的data里定义了isLogin的值，当它为true时，网页就会显示hello word,否则不显示<br><br><p>v-show: 调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。</p><ul><li>v-if 和v-show的区别：<ul><li>v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。</li><li>v-show：调整css dispaly属性，可以使客户端操作更加流畅。</li></ul></li></ul><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><br>v-for指令是循环渲染一组data中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且item是数组元素迭代的别名。<br></p><ul><li><p>html写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>js写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app=new Vue(&#123;</span><br><span class="line">     el:&apos;#app&apos;,</span><br><span class="line">     data:&#123;</span><br><span class="line">         items:[20,23,18,65,32,19,54,56,41]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这是一个最基础的循环，先在js里定义了items数组，然后在模板中用v-for循环出来，需要注意的是，你需要那个html标签循环，v-for就写在那个上边。</p></blockquote><h3 id="v-on：绑定事件监听器-简写"><a href="#v-on：绑定事件监听器-简写" class="headerlink" title="v-on：绑定事件监听器 简写 @:"></a>v-on：绑定事件监听器 简写 @:</h3><p><img src="http://7xjyw1.com1.z0.glb.clouddn.com/20170227091542.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;v-on事件监听器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;v-on 事件监听器&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       本场比赛得分： &#123;&#123;count&#125;&#125;&lt;br/&gt;</span><br><span class="line">       &lt;button v-on:click=&quot;jiafen&quot;&gt;加分&lt;/button&gt;</span><br><span class="line">       &lt;button v-on:click=&quot;jianfen&quot;&gt;减分&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                count:1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                jiafen:function()&#123;//定义执行的事件</span><br><span class="line">                    this.count++;</span><br><span class="line">                &#125;,</span><br><span class="line">                jianfen:function()&#123;</span><br><span class="line">                    this.count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="v-bind-指令-绑定css或者attr属性等-简写-src-href"><a href="#v-bind-指令-绑定css或者attr属性等-简写-src-href" class="headerlink" title="v-bind 指令 绑定css或者attr属性等 简写 :src :href"></a>v-bind 指令 绑定css或者attr属性等 简写 :src :href</h3><p>绑定img的src属性 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img v-bind:src=&quot;imgSrc&quot;  width=&quot;200px&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app=new Vue(&#123;</span><br><span class="line">    el:&apos;#app&apos;,</span><br><span class="line">    data:&#123;</span><br><span class="line">          imgSrc:&apos;http://baidu.com/wp-content/uploads/2017/02/vue01-2.jpg&apos;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
