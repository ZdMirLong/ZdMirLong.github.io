<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>identity server4 客服端模式认证</title>
      <link href="/2018/03/20/identityserver/"/>
      <url>/2018/03/20/identityserver/</url>
      <content type="html"><![CDATA[<h1 id="identity-server-4"><a href="#identity-server-4" class="headerlink" title="identity server 4"></a>identity server 4</h1><p><excrept inindex="" |="" 首页摘要=""></excrept></p><ol><li>使用vscode创建项目<blockquote><p>首先vscode安装c# nugget扩展<br>cd到需要创建项目的目录 执行命令<br>dotnet new webapi –name IdentityCenter</p></blockquote></li><li>添加identityserver4引用<blockquote><p> vscode下按住 ctrl+p 选中nugget add package ,输入       identityserver,选择安装 ,安装后点击restore</p></blockquote></li></ol><blockquote><p>  cd到创建的项目目录下,重新加载项目,否则命名空间无法出现智能提示 cd .\IdentityCenter\  执行命令 dotnet restore</p></blockquote><ol start="3"><li>添加identityserver中间件并使用<blockquote><p>首先starup中ConfigureServices方法启用中间件</p><a id="more"></a></blockquote><the rest="" of="" contents="" |="" 余下全文=""></the></li><li>使用vscode创建项目<blockquote><p>首先vscode安装c# nugget扩展<br>cd到需要创建项目的目录 执行命令<br>dotnet new webapi –name IdentityCenter</p></blockquote></li><li>添加identityserver4引用<blockquote><p> vscode下按住 ctrl+p 选中nugget add package ,输入       identityserver,选择安装 ,安装后点击restore</p></blockquote></li></ol><blockquote><p>  cd到创建的项目目录下,重新加载项目,否则命名空间无法出现智能提示 cd .\IdentityCenter\  执行命令 dotnet restore</p></blockquote><ol start="3"><li>添加identityserver中间件并使用<blockquote><p>首先starup中ConfigureServices方法启用中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//添加identityserver中间件</span><br><span class="line">services.AddIdentityServer()</span><br><span class="line">.AddDeveloperSigningCredential();</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>在Configure方法中启用中间件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Program.cs中设置启动端口为5000</span><br></pre></td></tr></table></figure></p></blockquote><pre><code> public static IWebHost BuildWebHost(string[] args) =&gt;        WebHost.CreateDefaultBuilder(args)            .UseStartup&lt;Startup&gt;()            .UseUrls(&quot;http://localhost:5000&quot;)//设置启动端口为5000            .Build();}</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 在根目录创建config.cs文件,定义api和resource</span><br></pre></td></tr></table></figure><p>using System.Collections;<br>using System.Collections.Generic;<br>using IdentityServer4.Models;</p><p>namespace IdentityCenter<br>{</p><pre><code>public class config{    ///获取所有的api集合    public static IEnumerable&lt;ApiResource&gt; GetResource()    {        return new List&lt;ApiResource&gt;{        new ApiResource(&quot;api&quot;,&quot;My Api&quot;)    };    }    /// &lt;summary&gt;    /// 获取所有客户端    /// &lt;/summary&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public static IEnumerable&lt;Client&gt; GetClients()    {        return new List&lt;Client&gt;{     new Client{           ClientId=&quot;client&quot;,//当前客户端id           AllowedGrantTypes=GrantTypes.ClientCredentials,//使用客服端方式           ClientSecrets={              new Secret(&quot;Secret&quot;.Sha256())            },            AllowedScopes={&quot;api&quot;}//指定可以访问的api 与上个方法定义的一致     } };    }}</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">5. 在starup.cs中配置添加config方法</span><br></pre></td></tr></table></figure><p> public void ConfigureServices(IServiceCollection services)<br>        {<br>            //添加identityserver中间件<br>            services.AddIdentityServer()<br>            .AddDeveloperSigningCredential()<br>            .AddInMemoryApiResources(config.GetResource())//添加config.cs中定义的客户端和服务端<br>            .AddInMemoryClients(config.GetClients());<br>            //添加mvc中间件<br>            services.AddMvc();<br>        }<br><code>`</code></p><ol start="6"><li>执行命令 dotnet run启动项目 访问<a href="http://localhost:5000/.well-known/openid-configuration可以看到生成的对应模式密码" target="_blank" rel="noopener">http://localhost:5000/.well-known/openid-configuration可以看到生成的对应模式密码</a></li></ol>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> .net core </category>
          
          <category> identity server4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> identity server4 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core 使用code first创建数据库</title>
      <link href="/2017/12/25/core3/"/>
      <url>/2017/12/25/core3/</url>
      <content type="html"><![CDATA[<blockquote><p>注: 此项目是在vs code下完成的 ,vs2017请按常规操作</p><ol><li>创建项目 <code>dotnet new mvc -au individual -uld --name  identitySampleUI</code>,-au表示添加认证机制,-uld表示添加本地数据库</li><li>初始化数据库<code>dotnet ef database update</code><br>其中 ef操作命令如下图</li></ol></blockquote><table><thead><tr><th>vscode</th><th>vs2017</th></tr></thead><tbody><tr><td>dotnet ef migrations add newcloum</td><td>Add-Migration</td></tr><tr><td>dotnet ef database update</td><td>Update-Database</td></tr><tr><td>dotnet ef migrations remove</td><td>Remove-Migration</td></tr></tbody></table><ol start="3"><li>在ApplicationUser.cs中添加一列<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public string NewColums&#123;get;set;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>执行 dotnet ef  migrations add newcloums ,在执行dotnet ef database update更新数据库 ,这时候可看到 数据库中Users表多了新增加的一列</p><h3 id="dbcontext"><a href="#dbcontext" class="headerlink" title="dbcontext"></a>dbcontext</h3><ul><li><p>创建一个类,继承DbContext</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ApplicationDbContext:DbContext</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">      public ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt; options ) </span><br><span class="line">          : base(options) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      public DbSet&lt;Sys_User&gt; Sys_User &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      protected override void OnModelCreating(ModelBuilder modelBuilder)</span><br><span class="line">      &#123;</span><br><span class="line">          base.OnModelCreating(modelBuilder);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>添加一个Sys_User类,字段随便 </p></li><li><p>在services中添加中间件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//添加dbcontext</span><br><span class="line"> services.AddDbContext&lt;ApplicationDbContext&gt;(options=&gt;options.UseSqlServer(Configuration.GetConnectionString(&quot;SqlServerConnection&quot;)));</span><br></pre></td></tr></table></figure></li><li><p>然后执行命令 <code>Add-Migration Migrations</code></p></li><li>在执行命令 <code>Update-Database</code>更新数据库,在数据库中查看刚添加的Sys_User表</li></ul>]]></content>
      
      <categories>
          
          <category> .net core </category>
          
          <category> .net core </category>
          
          <category> code first </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> code first </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core获取配置文件信息</title>
      <link href="/2017/12/25/core2/"/>
      <url>/2017/12/25/core2/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br> .net core获取配置文件信息<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在appsetting.json中配置数据库连接字符窜</span><br></pre></td></tr></table></figure><p>//配置数据地址<br>     “ConnectionString”: {<br>    “SqlConnectionString”: “server=120.78.176.211;database=Ethan.Blog.DB;User Id=sa;password=123456;”,<br>    “MongoDbString”: “mongodb://120.78.176.211:27017”<br>     },</p><p> “ApplicationConfiguration”: {<br>   //文件上传路径<br>   “FileUpPath”: “/upload/“,<br>  //是否启用单用户登录<br>  “IsSingleLogin”: “True”,<br> //允许上传的文件格式<br>   “AttachExtension”: “gif,jpg,jpeg,png,bmp,rar,zip,doc,docx,xls,xlsx,ppt,pptx,txt,flv,apk,mp4,mpg,ts,mpeg,mp3,bak,pdf”,<br>    //图片上传最大值KB<br>   “AttachImagesize”: 12400</p><p>  },<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 新建一个ConnectionString类 ,接受此数据</span><br></pre></td></tr></table></figure></p><pre><code> /// &lt;summary&gt;/// 接受数据库连接字符窜/// &lt;/summary&gt;public class ConnectionString {    /// &lt;summary&gt;    /// sql数据库 连接字符串    /// &lt;/summary&gt;    public string SqlConnectionString { get; set; }    /// &lt;summary&gt;    /// mongodb 数据库    /// &lt;/summary&gt;    public string MongoDbString { get; set; }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 新建一个ApplicationConfiguration类 ,接受此数据</span><br></pre></td></tr></table></figure><p> public class ApplicationConfiguration<br>    {</p><pre><code>    public string FileUpPath { get; set; }   public bool IsSingleLogin{ get; set; }    public string AttachExtension { get; set; }    public int AttachImagesize { get; set; }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- 在strup.cs中添加获取代码</span><br></pre></td></tr></table></figure><p>///读取配置文件字符窜<br>  services.Configure<connectionstring>(this.Configuration.GetSection(“ConnectionString”));</connectionstring></p><p>  //读取配置文件<br>services.Configure<applicationconfiguration>(this.Configuration.GetSection(“ApplicationConfiguration”));</applicationconfiguration></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 在controller中注入获取</span><br></pre></td></tr></table></figure><p> private  ConnectionString connectionString;<br>        /// <summary><br>        /// 构造函数 接受配置文件信息<br>        /// </summary><br>        public HomeController(IOptions<connectionstring> options) {<br>            connectionString = options.Value;</connectionstring></p><pre><code>}public IOptions&lt;ApplicationConfiguration&gt; options;public HomeController(IUserService _userService, IOptions&lt;ApplicationConfiguration&gt; _appConfiguration) {    this.userService = _userService;    this.options = _appConfiguration;}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 当然 也可以创建一个类,单独获取配置信息</span><br></pre></td></tr></table></figure><p>public class AppConfigurtaionServices<br>　　{<br>　　　　private readonly IOptions<applicationconfiguration> _appConfiguration;<br>　　　　public AppConfigurtaionServices(IOptions<applicationconfiguration> appConfiguration)<br>　　　　{<br>　　　　　　_appConfiguration = appConfiguration;<br>　　　　}</applicationconfiguration></applicationconfiguration></p><p>　　　　public ApplicationConfiguration AppConfigurations<br>　　　　{<br>　　　　　　get<br>　　　　　　　　{<br>　　　　　　　　　　return _appConfiguration.Value;<br>　　　　　　　　}<br>　　　　}<br>　　}　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#### 注意,不要忘记添加到注入 </span><br><span class="line"></span><br><span class="line">services.AddTransient&lt;AppConfigurtaionServices&gt;();  </span><br><span class="line"></span><br><span class="line"> 然后就可以使用了</span><br><span class="line"> </span><br><span class="line">![](https://images2015.cnblogs.com/blog/771789/201608/771789-20160804152623184-240740623.jpg)</span><br></pre></td></tr></table></figure></p></the>]]></content>
      
      <categories>
          
          <category> .net core </category>
          
          <category> .net core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core中授权认证1 使用Cookie-based认证实现</title>
      <link href="/2017/12/25/core1/"/>
      <url>/2017/12/25/core1/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>.net core中授权认证1 使用Cookie-based认证实现<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><ul><li><p>在项目Startup.cs中添加cookie认证支持</p><blockquote><p>在 ConfigureServices(IServiceCollection services)方法中添加认证中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//添加Cookie-based认证实现 </span><br><span class="line">           services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)</span><br><span class="line">               .AddCookie(Options=&gt; &#123;</span><br><span class="line">                   Options.LoginPath = &quot;/api/account/login&quot;;//表示授权时登录的地址</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>在Configure方法中启用中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//启用Cookie-based认证 在UseMvc之前</span><br><span class="line"> app.UseAuthentication();</span><br></pre></td></tr></table></figure></li><li><p>新建一个admin控制器,并在方法上加上授权标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Produces(&quot;application/json&quot;)]</span><br><span class="line"> [Route(&quot;api/admin&quot;)]</span><br><span class="line"> [Authorize]</span><br><span class="line"> public class adminController : Controller</span><br><span class="line"> &#123;</span><br><span class="line">     [HttpGet]</span><br><span class="line">     public IActionResult admin() &#123;</span><br><span class="line">         return Ok(new string[] &#123;&quot;Ethan&quot;,&quot;jac&quot; &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>新建account控制器,添加授权代码 </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Produces(&quot;application/json&quot;)]</span><br><span class="line">[Route(&quot;api/account&quot;)]</span><br><span class="line">public class accountController : Controller</span><br><span class="line">&#123;</span><br><span class="line"> /// &lt;summary&gt;</span><br><span class="line"> /// 登录方法</span><br><span class="line"> /// &lt;/summary&gt;</span><br><span class="line"> /// &lt;param name=&quot;ReturnUrl&quot;&gt;&lt;/param&gt;</span><br><span class="line"> /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    [HttpGet(&quot;login&quot;)]</span><br><span class="line">    public IActionResult login(string ReturnUrl) &#123;</span><br><span class="line"></span><br><span class="line">        //模拟用户登录 这里为用户的身份票据</span><br><span class="line">        var claims = new List&lt;Claim&gt; &#123;</span><br><span class="line">             new Claim(ClaimTypes.Name,&quot;Ethan&quot;),</span><br><span class="line">             new Claim(ClaimTypes.Role,&quot;admin&quot;)</span><br><span class="line">        &#125;;</span><br><span class="line">        //将票据加入到identity</span><br><span class="line">        var claimIdentity = new ClaimsIdentity(claims,CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class="line">        //注册identity</span><br><span class="line">        HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,new ClaimsPrincipal(claimIdentity));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return Ok(new string []&#123;&quot;s&quot;, ReturnUrl &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 注销登录 清除cookie</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    [HttpGet(&quot;LoginOut&quot;)]</span><br><span class="line">    public IActionResult LoginOut() &#123;</span><br><span class="line">        HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class="line">        return Ok(&quot;&#123;\&quot;msg\&quot;:\&quot;注销成功\&quot;&#125;&quot;);</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> .net core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core webapi中使用mongodb实现数据存储</title>
      <link href="/2017/12/21/mongoforcore/"/>
      <url>/2017/12/21/mongoforcore/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>在.net core中使用mongodb<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><ul><li>新建一个.net core webapi 项目 ,添加MongoDB.Driver nuget包</li><li>新建文件夹Data,存放mongodbContext类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line">public class MongoDbContext&lt;T&gt; where T:class, new()</span><br><span class="line">   &#123;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// mongoDatabase</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       private IMongoDatabase _mongoDatabase;</span><br><span class="line">      // private IMongoCollection&lt;Article&gt; _collection;</span><br><span class="line">       private Appsetting _appsetting;</span><br><span class="line">       public MongoDbContext(string DbString,string DatabaseName) &#123;</span><br><span class="line">         </span><br><span class="line">           var client = new MongoClient(DbString);</span><br><span class="line">           if (client != null)</span><br><span class="line">               _mongoDatabase = client.GetDatabase(DatabaseName);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 异步分页查询</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;CollectionName&quot;&gt;查询集合的名称&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;filter&quot;&gt;查询条件&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;pageIndex&quot;&gt;当前页数&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;pageSize&quot;&gt;页大小&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;field&quot;&gt;查询字段&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;sort&quot;&gt;排序&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public async Task&lt;IList&lt;T&gt;&gt; FindListByPageAsync(string CollectionName, FilterDefinition&lt;T&gt; filter, int pageIndex, int pageSize, string[] field = null, SortDefinition&lt;T&gt; sort = null) &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collection = _mongoDatabase.GetCollection&lt;T&gt;(CollectionName);</span><br><span class="line">               if (field == null || field.Length &lt;= 0) &#123;</span><br><span class="line">                   //不指定字段</span><br><span class="line">                   if(sort==null)</span><br><span class="line">                       return await collection.Find(filter).Skip((pageIndex - 1) * pageSize).Limit(pageSize).ToListAsync();</span><br><span class="line">                   else </span><br><span class="line">                       //进行排序</span><br><span class="line">                       return await collection.Find(filter).Sort(sort).Skip((pageIndex - 1) * pageSize).Limit(pageSize).ToListAsync();</span><br><span class="line">               &#125;</span><br><span class="line">               //制定查询字段</span><br><span class="line">               var fieldList = new List&lt;ProjectionDefinition&lt;T&gt;&gt;();</span><br><span class="line">               for (int i = 0; i &lt; field.Length; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   fieldList.Add(Builders&lt;T&gt;.Projection.Include(field[i].ToString()));</span><br><span class="line">               &#125;</span><br><span class="line">               var projection = Builders&lt;T&gt;.Projection.Combine(fieldList);</span><br><span class="line">               fieldList?.Clear();</span><br><span class="line"></span><br><span class="line">               //不排序</span><br><span class="line">               if (sort == null)</span><br><span class="line">                   return await collection.Find(filter).Project&lt;T&gt;(projection).Skip((pageIndex - 1) * pageSize).Limit(pageSize).ToListAsync();</span><br><span class="line">               else</span><br><span class="line">                   //排序查询</span><br><span class="line">                   return await collection.Find(filter).Sort(sort).Project&lt;T&gt;(projection).Skip((pageIndex - 1) * pageSize).Limit(pageSize).ToListAsync();</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       #region FindOneAsync 异步根据id查询一条数据</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 异步根据id查询一条数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;host&quot;&gt;mongodb连接信息&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;id&quot;&gt;objectid&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public  async Task&lt;T&gt; FindOneAsync(string CollectionName, string id, string[] field = null)</span><br><span class="line">       &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collection = _mongoDatabase.GetCollection&lt;T&gt;(CollectionName);</span><br><span class="line">               FilterDefinition&lt;T&gt; filter = Builders&lt;T&gt;.Filter.Eq(&quot;_id&quot;, new ObjectId(id));</span><br><span class="line">               //不指定查询字段</span><br><span class="line">               if (field == null || field.Length == 0)</span><br><span class="line">               &#123;</span><br><span class="line">                   return await collection.Find(filter).FirstOrDefaultAsync();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               //制定查询字段</span><br><span class="line">               var fieldList = new List&lt;ProjectionDefinition&lt;T&gt;&gt;();</span><br><span class="line">               for (int i = 0; i &lt; field.Length; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   fieldList.Add(Builders&lt;T&gt;.Projection.Include(field[i].ToString()));</span><br><span class="line">               &#125;</span><br><span class="line">               var projection = Builders&lt;T&gt;.Projection.Combine(fieldList);</span><br><span class="line">               fieldList?.Clear();</span><br><span class="line">               return await collection.Find(filter).Project&lt;T&gt;(projection).FirstOrDefaultAsync();</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 获取所有数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;CollectionName&quot;&gt;集合名&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public async  Task&lt;List&lt;T&gt;&gt; FindListAllAsync(string CollectionName) &#123;</span><br><span class="line">           var collection = _mongoDatabase.GetCollection&lt;T&gt;(CollectionName);</span><br><span class="line">           return await collection.Find&lt;T&gt;(new BsonDocument()).ToListAsync();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 删除一条数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;CollectionName&quot;&gt;&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;aid&quot;&gt;&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public async Task&lt;DeleteResult&gt; DeleteByAidAsync(string CollectionName,string aid) &#123;</span><br><span class="line"></span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collnection = _mongoDatabase.GetCollection&lt;T&gt;(CollectionName);</span><br><span class="line">               //创建查询表达式</span><br><span class="line">               FilterDefinition&lt;T&gt; filter = Builders&lt;T&gt;.Filter.Eq(&quot;_id&quot;, new ObjectId(aid));</span><br><span class="line"></span><br><span class="line">               return await collnection.DeleteOneAsync(filter);</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 根据条件删除多条数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;CollnectionName&quot;&gt;集合名&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;filter&quot;&gt;删除的条件&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;返回DeleteResult类型&lt;/returns&gt;</span><br><span class="line">       public async Task&lt;DeleteResult&gt; DeleteByFilterAsync(string CollnectionName, FilterDefinition&lt;T&gt; filter) &#123;</span><br><span class="line"></span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collnection = _mongoDatabase.GetCollection&lt;T&gt;(CollnectionName);</span><br><span class="line">               return await collnection.DeleteManyAsync(filter);</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 添加一条数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;CollnectionName&quot;&gt;&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;t&quot;&gt;&lt;/param&gt;</span><br><span class="line">       public async Task&lt;int&gt; AddOneAsync(string CollnectionName,T t) &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collnection = _mongoDatabase.GetCollection&lt;T&gt;(CollnectionName);</span><br><span class="line">               await collnection.InsertOneAsync(t);</span><br><span class="line">               return 1;</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 添加多条数据 </span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;CollnectionName&quot;&gt;&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;list&quot;&gt;需要添加数据的集合&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public async Task&lt;int&gt; AddManyAsync(string CollnectionName, List&lt;T&gt; list) &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collnection = _mongoDatabase.GetCollection&lt;T&gt;(CollnectionName);</span><br><span class="line">               await collnection.InsertManyAsync(list);</span><br><span class="line">               return 1;</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #region +UpdateAsync 异步修改一条数据</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 异步修改一条数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public  async Task&lt;UpdateResult&gt; UpdateAsync(string CollnectionName, T t, string id)</span><br><span class="line">       &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collnection = _mongoDatabase.GetCollection&lt;T&gt;(CollnectionName);</span><br><span class="line">               //修改条件</span><br><span class="line">               FilterDefinition&lt;T&gt; filter = Builders&lt;T&gt;.Filter.Eq(&quot;_id&quot;, new ObjectId(id));</span><br><span class="line">               //要修改的字段</span><br><span class="line">               var list = new List&lt;UpdateDefinition&lt;T&gt;&gt;();</span><br><span class="line">               foreach (var item in t.GetType().GetProperties())</span><br><span class="line">               &#123;</span><br><span class="line">                   if (item.Name.ToLower() == &quot;id&quot;) continue;</span><br><span class="line">                   list.Add(Builders&lt;T&gt;.Update.Set(item.Name, item.GetValue(t)));</span><br><span class="line">               &#125;</span><br><span class="line">               var updatefilter = Builders&lt;T&gt;.Update.Combine(list);</span><br><span class="line">               return await collnection.UpdateOneAsync(filter, updatefilter);</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line">       #region +UpdateManayAsync 异步批量修改数据</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 异步批量修改数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;dic&quot;&gt;要修改的字段&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;host&quot;&gt;mongodb连接信息&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;filter&quot;&gt;修改条件&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public  async Task&lt;UpdateResult&gt; UpdateManayAsync(string CollnectionName, Dictionary&lt;string, string&gt; dic, FilterDefinition&lt;T&gt; filter)</span><br><span class="line">       &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var collnection = _mongoDatabase.GetCollection&lt;T&gt;(CollnectionName);</span><br><span class="line">               T t = new T();</span><br><span class="line">               //要修改的字段</span><br><span class="line">               var list = new List&lt;UpdateDefinition&lt;T&gt;&gt;();</span><br><span class="line">               foreach (var item in t.GetType().GetProperties())</span><br><span class="line">               &#123;</span><br><span class="line">                   if (!dic.ContainsKey(item.Name)) continue;</span><br><span class="line">                   var value = dic[item.Name];</span><br><span class="line">                   list.Add(Builders&lt;T&gt;.Update.Set(item.Name, value));</span><br><span class="line">               &#125;</span><br><span class="line">               var updatefilter = Builders&lt;T&gt;.Update.Combine(list);</span><br><span class="line">               return await collnection.UpdateManyAsync(filter, updatefilter);</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line">               throw ex;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       #endregion</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class ArticcleController : Controller</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">       /// 存储配置文件信息</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       private readonly Appsetting _appsetting;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 获取dbcontext</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       private Data.MongoDbContext&lt;Article&gt; dbContext &#123; get; set; &#125;</span><br><span class="line">       public ArticcleController(IOptions&lt;Appsetting&gt; options)</span><br><span class="line">       &#123;</span><br><span class="line">           _appsetting = options.Value;</span><br><span class="line">           dbContext = new Data.MongoDbContext&lt;Article&gt;(_appsetting.MongoDbString, &quot;python&quot;);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 获取分页数据</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;pageindex&quot;&gt;页数&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       [HttpGet, Route(&quot;GetPage/&#123;pageindex&#125;&quot;)]</span><br><span class="line">       public async Task&lt;IActionResult&gt; Get(int pageindex) &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               var list = await dbContext.FindListByPageAsync(&quot;linduBlog&quot;, new BsonDocument(), pageindex, 15);</span><br><span class="line">               return Json(list);</span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               throw;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> MongoDb </category>
          
          <category> MongoDb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core webapi使用swagger生成api帮助文档</title>
      <link href="/2017/12/21/webapi2/"/>
      <url>/2017/12/21/webapi2/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>.net core webapi使用swagger生成api帮助文档<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><h4 id="此篇文章接上一篇"><a href="#此篇文章接上一篇" class="headerlink" title="此篇文章接上一篇"></a>此篇文章接上一篇</h4><ul><li>安装依赖 <code>Install-Package NSwag.AspNetCore</code></li><li><p>在该Startup.Configure方法中，启用用于提供生成的Swagger规范和Swagger UI的中间件：</p><blockquote><p>  app.UseStaticFiles();</p></blockquote><p>   app.UseSwaggerUi(typeof(Startup).GetTypeInfo().Assembly, settings =&gt;</p><pre><code>{    //可在 GeneratorSettings设置相应的描述信息    settings.GeneratorSettings.DefaultPropertyNameHandling = PropertyNameHandling.CamelCase;    settings.GeneratorSettings.Description = &quot;测试nswag&quot;;    settings.GeneratorSettings.Title = &quot;my Nswag&quot;;    settings.GeneratorSettings.Version = &quot;2.0&quot;;    //settings.MiddlewareBasePath = &quot;localhost:5000:api/*&quot;;});</code></pre></li><li>右键  项目-&gt;属性 勾选xml选项</li><li><p>修改launchSettings.json,将默认地址修改为swagger</p></li><li><p>一般nswag是根据你的方法注释生成xml文档的 ,如果api方法中需要返回400 200等操作码时,应当这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 添加一个用户</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;remarks&gt;</span><br><span class="line">///  </span><br><span class="line">///     POST /User</span><br><span class="line">///     &#123;</span><br><span class="line">///        &quot;Age&quot;: &quot;年龄&quot;,</span><br><span class="line">///        &quot;Name&quot;: &quot;名称&quot;,</span><br><span class="line">///        &quot;Sex&quot;: &quot;性别</span><br><span class="line">///     &#125;</span><br><span class="line">/// </span><br><span class="line">/// &lt;/remarks&gt;</span><br><span class="line">/// &lt;param name=&quot;item&quot;&gt;用户的json对象&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;返回一个对象&lt;/returns&gt;</span><br><span class="line">/// &lt;response code=&quot;201&quot;&gt;返回新创建的项目&lt;/response&gt;</span><br><span class="line">/// &lt;response code=&quot;400&quot;&gt;如果item是null&lt;/response&gt;</span><br><span class="line">[HttpPost]</span><br><span class="line">[ProducesResponseType(typeof(User), 201)]</span><br><span class="line">[ProducesResponseType(typeof(User), 400)]</span><br><span class="line">[HttpPost]</span><br><span class="line">public IActionResult Post([FromBody]User item)</span><br><span class="line">&#123;</span><br><span class="line">    if (item == null)</span><br><span class="line">    &#123;</span><br><span class="line">        return BadRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    return Ok(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>其中 remarks节点指定一个返回体 </p></blockquote><p>运行生成此页面表示构建成功<br><img src="http://wx2.sinaimg.cn/large/006MNXdAgy1fqk3sbm8umj31br0jkwfd.jpg" alt="image"></p></the>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> webapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongodb简单使用</title>
      <link href="/2017/12/21/mongo1/"/>
      <url>/2017/12/21/mongo1/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>mongodb简单使用<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><p><a href="https://www.cnblogs.com/lecaf/archive/2013/08/23/mongodb.html" target="_blank" rel="noopener">安装和配置mongodb</a></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>show dbs 显示当前所有的数据库</li><li>use xxx  表示选择某个数据库进行操作 如果数据库不存在则为创建数据库 <br><font color="red">注意:创建的数据库(newdb)不在列表中。要显示数据库，需要至少插入一个文档，空的数据库是不显示出来的。</font></li></ul><h3 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.items.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;) </span><br><span class="line">db表示你use时选择的数据库 items表示在此数据库中穿件一个items集合</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><font color="red"> 使用 db.dropDatabase()删除数据库  如果不指定use的数据库,将删除所有数据库</font> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**先选择操作的数据库</span><br><span class="line"></span><br><span class="line">use python</span><br><span class="line"></span><br><span class="line">**在执行删除操作</span><br><span class="line"></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h3><p>只需要传入一个文档数组集合即可</p><h6 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">db.sina.insert([</span><br><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;:&quot;第二条新闻&quot;,</span><br><span class="line">    &quot;Authori&quot;:&quot;Ethan&quot;,</span><br><span class="line">    &quot;content&quot;:&quot;内容&quot;</span><br><span class="line"> &#125;,</span><br><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;:&quot;第三条新闻&quot;,</span><br><span class="line">    &quot;Authori&quot;:&quot;Ethan&quot;,</span><br><span class="line">    &quot;content&quot;:&quot;内容&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">    &quot;title&quot;:&quot;第四条新闻&quot;,</span><br><span class="line">    &quot;Authori&quot;:&quot;Ethan&quot;,</span><br><span class="line">    &quot;content&quot;:&quot;内容&quot;</span><br><span class="line"> &#125;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="insertMany-方法将多个文档插入到集合中-数组形式-该方法返回执行成功的-id的值"><a href="#insertMany-方法将多个文档插入到集合中-数组形式-该方法返回执行成功的-id的值" class="headerlink" title="insertMany()方法将多个文档插入到集合中,数组形式,该方法返回执行成功的_id的值"></a>insertMany()方法将多个文档插入到集合中,数组形式,该方法返回执行成功的_id的值</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.sina.insertMany([</span><br><span class="line">   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class="line">   &#123; item: &quot;mat&quot;, qty: 85, tags: [&quot;gray&quot;], size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class="line">   &#123; item: &quot;mousepad&quot;, qty: 25, tags: [&quot;gel&quot;, &quot;blue&quot;], size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">//返回结果</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedIds&quot; : [</span><br><span class="line">                ObjectId(&quot;59552c1c46be576f199feb56&quot;),</span><br><span class="line">                ObjectId(&quot;59552c1c46be576f199feb57&quot;),</span><br><span class="line">                ObjectId(&quot;59552c1c46be576f199feb58&quot;)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入单个文档-db-collection-insertOne-和insertMany一样-返回成功的id值"><a href="#插入单个文档-db-collection-insertOne-和insertMany一样-返回成功的id值" class="headerlink" title="插入单个文档  db.collection.insertOne() 和insertMany一样 返回成功的id值"></a>插入单个文档  db.collection.insertOne() 和insertMany一样 返回成功的id值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> db.inventory.insertOne(</span><br><span class="line">   &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5,uom: &quot;cm&quot; &#125; &#125;</span><br><span class="line"> )</span><br><span class="line"> </span><br><span class="line"> //返回结果</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedId&quot; : [</span><br><span class="line">                ObjectId(&quot;59552c1c46be576f199feb56&quot;)</span><br><span class="line">               </span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><ul><li>find(document) 方法  document表示查询条件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">db.sina.find(&#123;&quot;name&quot;:&quot;新闻&quot;,&quot;title&quot;:&quot;第一条新闻&quot;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h6 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h6><ul><li>相等    {<key>:<value>}    db.mycol.find({“by”:”yiibai”}).pretty()    where by = ‘yiibai’</value></key></li><li>小于    {<key>:{$lt:<value>}}    db.mycol.find({“likes”:{$lt:50}}).pretty()    where likes &lt; 50</value></key></li><li>小于等于    {<key>:{$lte:<value>}}    db.mycol.find({“likes”:{$lte:50}}).pretty()    where likes &lt;= 50</value></key></li><li>大于    {<key>:{$gt:<value>}}    db.mycol.find({“likes”:{$gt:50}}).pretty()    where likes &gt; 50</value></key></li><li>大于等于    {<key>:{$gte:<value>}}    db.mycol.find({“likes”:{$gte:50}}).pretty()    where likes &gt;= 50</value></key></li><li>不等于    {<key>:{$ne:<value>}}    db.mycol.find({“likes”:{$ne:50}}).pretty()    where likes != 50</value></key></li></ul><h6 id="AND-查询"><a href="#AND-查询" class="headerlink" title="AND 查询"></a>AND 查询</h6><p>结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.xxxx.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $and: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure></p><p>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">db.sina.find(</span><br><span class="line"> &#123;$and:[</span><br><span class="line">     &#123;&quot;title&quot;:&quot;新闻一&quot;&#125;,</span><br><span class="line">     &#123;&quot;content&quot;:&quot;这是新闻的内容  是不是很吊&quot;&#125;</span><br><span class="line">     ]&#125;</span><br><span class="line"> </span><br><span class="line"> ).pretty()</span><br></pre></td></tr></table></figure></p><h6 id="or查询-和and查询一样-只是and改为or即可"><a href="#or查询-和and查询一样-只是and改为or即可" class="headerlink" title="or查询  和and查询一样 只是and改为or即可"></a>or查询  和and查询一样 只是and改为or即可</h6><h5 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h5><p>数据准备<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.insertMany( [</span><br><span class="line">   &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;A&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><ul><li><p>询选择字段size等于{ h: 14, w: 21, uom: “cm” }的所有文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.find(&#123; size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><p>在size字段中嵌套的字段uom等于“in”的所有文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.find( &#123; &quot;size.uom&quot;: &quot;in&quot; &#125; )</span><br></pre></td></tr></table></figure></li></ul><h6 id="指定AND条件-查询选择嵌套字段h小于15的所有文档，嵌套字段uom等于“in”，status字段等于“D”："><a href="#指定AND条件-查询选择嵌套字段h小于15的所有文档，嵌套字段uom等于“in”，status字段等于“D”：" class="headerlink" title="指定AND条件 查询选择嵌套字段h小于15的所有文档，嵌套字段uom等于“in”，status字段等于“D”："></a>指定AND条件 查询选择嵌套字段h小于15的所有文档，嵌套字段uom等于“in”，status字段等于“D”：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.find( &#123; &quot;size.h&quot;: &#123; $lt: 15 &#125;, &quot;size.uom&quot;: &quot;in&quot;, status: &quot;D&quot; &#125; )</span><br></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除id为100的数据</span><br><span class="line">db.mycol.remove(&#123;&apos;_id&apos;:100&#125;)</span><br></pre></td></tr></table></figure><h4 id="导出导入数据库"><a href="#导出导入数据库" class="headerlink" title="导出导入数据库"></a>导出导入数据库</h4><blockquote><pre><code>1、导出工具：mongoexport1、概念：    mongoDB中的mongoexport工具可以把一个collection导出成JSON格式或CSV格式的文件。可以通过参数指定导出的数据项，也可以根据指定的条件导出数据。2、语法：    mongoexport -d dbname -c collectionname -o file --type json/csv -f field    参数说明：        -d ：数据库名        -c ：collection名        -o ：输出的文件名        --type ： 输出的格式，默认为json        -f ：输出的字段，如果-type为csv，则需要加上-f &quot;字段名&quot;3、示例：    sudo mongoexport -d mongotest -c users -o /home/python/Desktop/mongoDB/users.json --type json -f  &quot;_id,user_id,user_name,age,status&quot;</code></pre></blockquote><pre><code>2、数据导入：mongoimport1、语法：    mongoimport -d dbname -c collectionname --file filename --headerline --type json/csv -f field    参数说明：        -d ：数据库名        -c ：collection名        --type ：导入的格式默认json        -f ：导入的字段名        --headerline ：如果导入的格式是csv，则可以使用第一行的标题作为导入的字段        --file ：要导入的文件 2、示例：    sudo mongoimport -d mongotest -c users --file /home/mongodump/articles.json --type json</code></pre></the>]]></content>
      
      <categories>
          
          <category> MongoDb </category>
          
          <category> MongoDb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.net core webapi使用</title>
      <link href="/2017/12/21/webapi1/"/>
      <url>/2017/12/21/webapi1/</url>
      <content type="html"><![CDATA[<excrept in="" index="" |="" 摘要=""><p>什么是webapi 官方定义如下，强调两个关键点，即可以对接各种客户端（浏览器，移动设备），构建http服务的框架。</p><blockquote><p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API   is an ideal platform for building RESTful applications on the .NET Framework.</p></blockquote><p>Web API在ASP.NET完整框架中地位如下图，与SignalR一起同为构建Service的框架。Web API负责构建http常规服务，而SingalR主要负责的是构建实时服务，例如股票，聊天室，在线游戏等实时性要求比较高的服务。<br><img src="http://wx2.sinaimg.cn/large/006MNXdAgy1fqhx73nux2j30ic08ejsl.jpg" alt="图片"></p><p>Web API最重要的是可以构建面向各种客户端的服务。另外与WCF REST Service不同在于，Web API利用Http协议的各个方面来表达服务(例如 URI/request response header/caching/versioning/content format)，因此就省掉很多配置。</p><p><img src="https://ws1.sinaimg.cn/large/006MNXdAgy1fqhxauawy3j30cz07775o.jpg" alt="图片"></p><p>当你遇到以下这些情况的时候，就可以考虑使用Web API了。<br><a id="more"></a></p><the rest="" of="" contents="" |余下全文=""><h4 id="net-core-webapi使用"><a href="#net-core-webapi使用" class="headerlink" title=".net core webapi使用"></a>.net core webapi使用</h4><p>什么是webapi 官方定义如下，强调两个关键点，即可以对接各种客户端（浏览器，移动设备），构建http服务的框架。</p><blockquote><p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API   is an ideal platform for building RESTful applications on the .NET Framework.</p></blockquote><p>Web API在ASP.NET完整框架中地位如下图，与SignalR一起同为构建Service的框架。Web API负责构建http常规服务，而SingalR主要负责的是构建实时服务，例如股票，聊天室，在线游戏等实时性要求比较高的服务。<br><img src="http://wx2.sinaimg.cn/large/006MNXdAgy1fqhx73nux2j30ic08ejsl.jpg" alt="图片"></p><p>Web API最重要的是可以构建面向各种客户端的服务。另外与WCF REST Service不同在于，Web API利用Http协议的各个方面来表达服务(例如 URI/request response header/caching/versioning/content format)，因此就省掉很多配置。</p><p><img src="https://ws1.sinaimg.cn/large/006MNXdAgy1fqhxauawy3j30cz07775o.jpg" alt="图片"></p><ul><li>当你遇到以下这些情况的时候，就可以考虑使用Web API了。<ul><li>需要Web Service但是不需要SOAP</li><li>需要在已有的WCF服务基础上建立non-soap-based http服务</li><li>只想发布一些简单的Http服务，不想使用相对复杂的WCF配置</li><li>发布的服务可能会被带宽受限的设备访问</li><li>希望使用开源框架，关键时候可以自己调试或者自定义一下框架</li></ul></li></ul><h3 id="关于相关概念百度一下吧-下面开始使用web-api"><a href="#关于相关概念百度一下吧-下面开始使用web-api" class="headerlink" title="关于相关概念百度一下吧 ,下面开始使用web api"></a>关于相关概念百度一下吧 ,下面开始使用web api</h3><ul><li>新建 .net core application ,选中webapi</li></ul><p>url操作说明  </p><table><thead><tr><th>操作</th><th style="text-align:center">Http请求类型</th><th style="text-align:right">url表现形式 </th></tr></thead><tbody><tr><td>  Get contact list</td><td style="text-align:center">GET</td><td style="text-align:right">/api/contacts</td></tr><tr><td>Get filtered contacts</td><td style="text-align:center">GET</td><td style="text-align:right">/api/contacts?$top=2</td></tr><tr><td>Get contact by ID</td><td style="text-align:center">GET</td><td style="text-align:right">/api/contacts/id</td></tr><tr><td>Create new contact</td><td style="text-align:center">POST</td><td style="text-align:right">/api/contacts</td></tr><tr><td>Update a contact</td><td style="text-align:center">PUT</td><td style="text-align:right">/api/contacts/id</td></tr><tr><td>Delete a contact</td><td style="text-align:center">DELETE</td><td style="text-align:right">/api/contacts/id</td></tr></tbody></table><h4 id="实例如下"><a href="#实例如下" class="headerlink" title="实例如下"></a>实例如下</h4><ul><li>get请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class HomeController : Controller</span><br><span class="line">   &#123;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       [HttpGet,router(&quot;paged&quot;)]</span><br><span class="line">       public async  Task&lt;IEnumerable&lt;string&gt;&gt; Get()&#123;</span><br><span class="line"></span><br><span class="line">           await Task.Delay(500);</span><br><span class="line">           return new string []&#123;&quot;hvalue1&quot;,&quot;hvalue2&quot; &#125;;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       [HttpGet,router(&quot;&#123;id&#125;&quot;)]</span><br><span class="line">       public string Get(int id)</span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           return id + &quot;h&quot;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>说明 : 在一个控制器中有多个http请求相同的方法时,须指定其路由别名,否则会出现默认调用第一个的情况(踩过坑的)<br> router 给方法指定路由别名 .如果带参数的需要指定参数的名称,用{}包装 如router(“{id}”) </p></blockquote><ul><li>post请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> [HttpPost]</span><br><span class="line">public async Task&lt;IActionResult&gt; Post(Article article) &#123;</span><br><span class="line">    return Ok(article);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>值得注意的是:当在post请求指定为<code>public async Task&lt;IActionResult&gt; Post([FromBody] test test)</code> [FromBody] 序列化时,前端传入的是一个json字符串<br><img src="http://wx4.sinaimg.cn/large/006MNXdAgy1fqhycrdc0gj30pz0ep3yq.jpg" alt=""><br>当不指定为FromBody时,传入的是一个对象</p></blockquote><ul><li>delete请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[HttpDelete]</span><br><span class="line">   public async Task&lt;IActionResult&gt; Delete(string id) &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                var result = await dbContext.DeleteByAidAsync(&quot;linduBlog&quot;, id);</span><br><span class="line">                return Ok(result);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                return BadRequest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置跨域访问"><a href="#设置跨域访问" class="headerlink" title="设置跨域访问"></a>设置跨域访问</h3><p>在Startup文件中添加cors跨域,然后在controller上启用cors  [EnableCors(“any”)] //设置跨域访问</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">    &#123;</span><br><span class="line">        services.AddMvc();</span><br><span class="line"></span><br><span class="line">         services.AddCors(options=&gt; &#123;</span><br><span class="line">            options.AddPolicy(&quot;any&quot;,build=&gt; &#123;</span><br><span class="line">            build.AllowAnyMethod()</span><br><span class="line">            .AllowAnyHeader()</span><br><span class="line">            .AllowAnyOrigin()</span><br><span class="line">            .AllowCredentials();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里设置为AllowAnyMethod 表示所有的请求都能访问.当我们需要只允许某个服务访问时应在build处添加 <code>builder.WithOrigins(urls)</code>urls表示允许访问的服务地址</p></blockquote><h3 id="设置陀螺峰命名问题"><a href="#设置陀螺峰命名问题" class="headerlink" title="设置陀螺峰命名问题"></a>设置陀螺峰命名问题</h3><p>  在 core webapi中,当返回的类型数据包含大写时会自动转换为小写.此问题需要在stratup中AddJsonOptions方法配置<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvc()//去掉默认的将大写改为小写的功能</span><br><span class="line">        .AddJsonOptions(options =&gt; options.SerializerSettings.</span><br><span class="line">          ContractResolver = new DefaultContractResolver());</span><br></pre></td></tr></table></figure></p></the></excrept>]]></content>
      
      <categories>
          
          <category> .net core Or Identity server </category>
          
          <category> webapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .net core </tag>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq4 fanout分列模式使用</title>
      <link href="/2017/12/19/rabbitmq4/"/>
      <url>/2017/12/19/rabbitmq4/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |首页摘要=""></excerpt></p><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote><p>场景 模拟接受email或sms消息</p><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>发送消息<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></li></ul><h4 id="rabbitmq4-fanout分列模式使用"><a href="#rabbitmq4-fanout分列模式使用" class="headerlink" title="rabbitmq4 fanout分列模式使用"></a>rabbitmq4 fanout分列模式使用</h4><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote><p>场景 模拟接受email或sms消息</p><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>发送消息</li></ul><h3 id="生产者程序"><a href="#生产者程序" class="headerlink" title="生产者程序"></a>生产者程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line"> var factory = new ConnectionFactory();</span><br><span class="line"> factory.UserName = &quot;&quot;;</span><br><span class="line"> factory.Password = &quot;&quot;;</span><br><span class="line"> factory.HostName = &quot;&quot;;</span><br><span class="line">   using (var connection=factory.CreateConnection())</span><br><span class="line">          &#123;</span><br><span class="line">              using (var channel=connection.CreateModel())</span><br><span class="line">              &#123;</span><br><span class="line">                  //创建fanout交换器</span><br><span class="line">                  channel.ExchangeDeclare(&quot;ex_fanout&quot;,ExchangeType.Fanout,true,false,null);</span><br><span class="line"></span><br><span class="line">                  for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                  &#123;</span><br><span class="line">                      var reamker = i % 2 == 0 ? &quot;sms&quot; : &quot;emai&quot;;</span><br><span class="line">                      var msg = Encoding.UTF8.GetBytes(this.textBox1.Text+ i.ToString());</span><br><span class="line">                      Console.WriteLine(&quot;内容:发送内容，&quot; + i);</span><br><span class="line">                      //创建队列</span><br><span class="line">                       channel.QueueDeclare(reamker,true,false,false,null);</span><br><span class="line">                      //绑定队列和交换器 不需要指定routingkey 但是不能为null,否则会报错</span><br><span class="line">                      channel.QueueBind(reamker,&quot;ex_fanout&quot;,&quot;&quot;,null);</span><br><span class="line">                    //不需要指定routingkey,指定了也没用.因为交换机是fanout类型</span><br><span class="line">                      channel.BasicPublish(&quot;ex_fanout&quot;, string.Empty, null, msg);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h5 id="特别注意上面’不需要指定routingkey地方’-当我将routingkey的参数值设置为null时会报未将对象引用到实例错误-需要改为””-或者string-empty”"><a href="#特别注意上面’不需要指定routingkey地方’-当我将routingkey的参数值设置为null时会报未将对象引用到实例错误-需要改为””-或者string-empty”" class="headerlink" title="特别注意上面’不需要指定routingkey地方’,当我将routingkey的参数值设置为null时会报未将对象引用到实例错误.需要改为”” 或者string.empty”"></a>特别注意上面’不需要指定routingkey地方’,当我将routingkey的参数值设置为null时会报未将对象引用到实例错误.需要改为”” 或者string.empty”</h5><h3 id="消费者程序实现"><a href="#消费者程序实现" class="headerlink" title="消费者程序实现"></a>消费者程序实现</h3><ul><li>创建工厂</li><li>创建连接</li><li>创建信道</li><li>创建队列</li><li>创建交换器 指定为fanout类型</li><li>绑定队列与交换器</li><li>消费消息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line"></span><br><span class="line">         var factory = new ConnectionFactory();</span><br><span class="line">         factory.UserName = &quot;&quot;;</span><br><span class="line">         factory.Password = &quot;&quot;;</span><br><span class="line">         factory.HostName = &quot;&quot;;</span><br><span class="line">         while (true)</span><br><span class="line">         &#123;</span><br><span class="line">             Console.WriteLine(&quot;请选择登陆：1邮箱，2短信?&quot;);</span><br><span class="line">             string input = Console.ReadLine();</span><br><span class="line">             if (input == &quot;1&quot; || input == &quot;2&quot;)</span><br><span class="line">             &#123;</span><br><span class="line">                 var queueName = input == &quot;1&quot; ? &quot;sms&quot; : &quot;emai&quot;;</span><br><span class="line"></span><br><span class="line">                 using (var connection = factory.CreateConnection())</span><br><span class="line">                 &#123;</span><br><span class="line">                     using (var channel = connection.CreateModel())</span><br><span class="line">                     &#123;</span><br><span class="line">                         //指定队列</span><br><span class="line">                         channel.QueueDeclare(queueName,true,false,false,null);</span><br><span class="line">                         //指定交换器</span><br><span class="line">                         channel.ExchangeDeclare(&quot;ex_fanout&quot;,ExchangeType.Fanout,true,false,null);</span><br><span class="line">                         //绑定交换器 当交换器为fanout时不需指定路由 </span><br><span class="line">                         channel.QueueBind(queueName, &quot;ex_fanout&quot;,string.Empty,null);</span><br><span class="line"></span><br><span class="line">                         var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                         consumer.Received += (model,eva)=&gt; &#123;</span><br><span class="line">                             var msg = Encoding.UTF8.GetString(eva.Body);</span><br><span class="line">                             Console.WriteLine(queueName + &quot;显示结果：&quot; + msg);</span><br><span class="line">                         &#125;;</span><br><span class="line">                         //指定消费队列</span><br><span class="line">                         channel.BasicConsume(queueName, true, consumer);</span><br><span class="line">                         Console.ReadKey();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>fanout特点: 　所有发送到Fanout Exchange的消息都会被转发到与该Exchange 绑定(Binding)的所有Queue上。  从上诉实例中我们先申明了一个ex_fanout的交换器 ,而在生产者程序中我们判断i%2是否等于0来指定队列为”sms”或者 “emai”,而这时候不管队列为sms或则email都已经绑定在ex_fanout交换器上,而Fanout Exchange又把消息分发到所有与他绑定的队列中,所以最后的结果都是100条消息</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq3 一个生产者 多个消费者</title>
      <link href="/2017/12/19/rabbitmq3/"/>
      <url>/2017/12/19/rabbitmq3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |首页摘要=""><br>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化</excerpt></p><h3 id="生产者步骤"><a href="#生产者步骤" class="headerlink" title="生产者步骤"></a>生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列</li><li>申明交换器 ExchangeDeclare</li><li>将队列与交换器绑定 QueueBind</li><li>创建属性 设置消息持久化 Persistent</li><li>发送消息到队列并指定消息持久化类型 basicProperties<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h4 id="使用一个生产者-多个消费时需要将队列与路由交换器绑定-并设置消息持久化"><a href="#使用一个生产者-多个消费时需要将队列与路由交换器绑定-并设置消息持久化" class="headerlink" title="使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化"></a>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化</h4></the></li></ul><blockquote><p>使用一个生产者,多个消费时需要将队列与路由交换器绑定 并设置消息持久化 </p></blockquote><h3 id="生产者步骤-1"><a href="#生产者步骤-1" class="headerlink" title="生产者步骤"></a>生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列</li><li>申明交换器 ExchangeDeclare</li><li>将队列与交换器绑定 QueueBind</li><li>创建属性 设置消息持久化 Persistent</li><li>发送消息到队列并指定消息持久化类型 basicProperties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line">           var factory = new ConnectionFactory();</span><br><span class="line">           factory.UserName = &quot;UserName&quot;;</span><br><span class="line">           factory.Password = &quot;UserName&quot;;</span><br><span class="line">           factory.HostName = &quot;&quot;;</span><br><span class="line">           using (var connection = factory.CreateConnection())//创建连接</span><br><span class="line">           &#123;</span><br><span class="line">               using (var channel = connection.CreateModel())//创建信道</span><br><span class="line">               &#123;</span><br><span class="line">                   //创建队列  队列名 是否持久化 是否唯一 是否自动删除  参数列表</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   //创建交换器  交换器名称  类型 是否持久化  是否自动删除 其他参数</span><br><span class="line">                   channel.ExchangeDeclare(&quot;ex_hello&quot;, &quot;direct&quot;,true,false,null);</span><br><span class="line"></span><br><span class="line">                   //将队列与交换器绑定 队列名 交换器名 路由名</span><br><span class="line">                   channel.QueueBind(&quot;hello&quot;,&quot;ex_hello&quot;, &quot;Exchange_hello&quot;);</span><br><span class="line"></span><br><span class="line">                   //内容的基本属性</span><br><span class="line">                   var properties = channel.CreateBasicProperties();</span><br><span class="line">                   //设置消息内容持久化</span><br><span class="line">                    properties.Persistent = true;</span><br><span class="line"></span><br><span class="line">                   for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       string msg = this.textBox1.Text.Trim()+&quot;&quot;+i;</span><br><span class="line">                       //rabbitmq发送二进制数据</span><br><span class="line">                       var body = Encoding.UTF8.GetBytes(msg);</span><br><span class="line">                       //发送消息 exchange 交换器  routingKey  路由 </span><br><span class="line">                       channel.BasicPublish(exchange: &quot;ex_hello&quot;, routingKey: &quot;Exchange_hello&quot;, basicProperties: properties, body: body);</span><br><span class="line"></span><br><span class="line">                       this.textBox2.Text += msg + &quot;发送成功!\r\n&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                 </span><br><span class="line"></span><br><span class="line">              </span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列 此处的队列名必须与生产者的队列名相同</li><li>创建交换器 与生产者交换器名字相同</li><li>将队列与交换器绑定 </li><li>设置公平分发 同一时间只处理一个消息</li><li>创建事件驱动的消费者类型，绑定消费 EventingBasicConsumer</li><li>阻塞获取消息</li><li>指定消费队列 BasicConsume</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">            var factory = new ConnectionFactory();</span><br><span class="line">            factory.UserName = &quot;admin&quot;;</span><br><span class="line">            factory.Password = &quot;admin&quot;;</span><br><span class="line">            factory.HostName = &quot;116.196.76.89&quot;;</span><br><span class="line"></span><br><span class="line">            //创建连接</span><br><span class="line">            using (var connection = factory.CreateConnection())</span><br><span class="line">            &#123;//创建信道</span><br><span class="line">                using (var channel = connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    //申明队列</span><br><span class="line">                    channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line"></span><br><span class="line">                    //申明交换器</span><br><span class="line">                    channel.ExchangeDeclare(&quot;ex_hello&quot;, &quot;direct&quot;, true, false, null);</span><br><span class="line">                    //绑定交换器</span><br><span class="line">                    channel.QueueBind(&quot;hello&quot;, &quot;ex_hello&quot;, &quot;Exchange_hello&quot;);</span><br><span class="line"></span><br><span class="line">                    //公平分发 同一时间只处理一个消息</span><br><span class="line">                     channel.BasicQos(0, 1, true);</span><br><span class="line"></span><br><span class="line">                    //创建事件驱动的消费者类型，绑定消费</span><br><span class="line">                    var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                    //阻塞获取消息</span><br><span class="line">                    consumer.Received += (model, ea) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        var body = ea.Body;</span><br><span class="line">                        var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                        Console.WriteLine(&quot; 我是消费者我接收到消息： &#123;0&#125;&quot;, message);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    //指定消费队列</span><br><span class="line">                    channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">                                         autoAck: true,</span><br><span class="line">                                         consumer: consumer);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line"></span><br><span class="line">                    Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq2 在c#中简单使用rabbitmq 实现生产者和消费者</title>
      <link href="/2017/12/18/rabbitmq2/"/>
      <url>/2017/12/18/rabbitmq2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><blockquote><p>要使用rabbitmq,必须先安装它.安装教程网上很多这里直接略过.</p></blockquote><ul><li>新建c#控制台项目,添加Rabbitmq.Client.dll引用  管理nuget包搜索 <code>Rabbitmq.Client</code><a id="more"></a></li></ul><the rest="" of="" contents="" |="" 余下全文=""><h3 id="创建生产者步骤"><a href="#创建生产者步骤" class="headerlink" title="创建生产者步骤"></a>创建生产者步骤</h3><ul><li>创建ConnectionFactory连接工厂</li><li>通过工厂获取连接connection</li><li>创建信道</li><li>申明队列</li><li><p>发送消息到队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 1 创建连接工厂,指定地址 用户名和密码</span><br><span class="line">  var factory = new ConnectionFactory();</span><br><span class="line">  factory.UserName = &quot;UserName&quot;;</span><br><span class="line">  factory.Password = &quot;Password&quot;;</span><br><span class="line">  factory.HostName = &quot;address&quot;;</span><br><span class="line">  using (var connection = factory.CreateConnection())//创建连接</span><br><span class="line">    &#123;</span><br><span class="line">        using (var channel = connection.CreateModel())//创建信道</span><br><span class="line">           &#123;</span><br><span class="line">                   //创建队列  队列名 是否持久化 是否唯一 是否自动删除  参数列表</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   for (int i = 0; i &lt; 100; i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       string msg = this.textBox1.Text.Trim()+&quot;&quot;+i;</span><br><span class="line">                       //rabbitmq发送二进制数据</span><br><span class="line">                       var body = Encoding.UTF8.GetBytes(msg);</span><br><span class="line">                       //发送消息 exchange 交换器  routingKey  路由 </span><br><span class="line">                       channel.BasicPublish(exchange: &quot;&quot;, routingKey: &quot;hello&quot;, basicProperties: null, body: body);</span><br><span class="line">                       this.textBox2.Text += msg + &quot;发送成功!\r\n&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="消费者步骤"><a href="#消费者步骤" class="headerlink" title="消费者步骤"></a>消费者步骤</h3><ul><li>创建ConnectionFactory连接工厂  </li><li>创建连接connection</li><li>创建信道</li><li>申明队列 此处的队列名必须与生产者的队列名相同</li><li>创建事件驱动的消费者类型，绑定消费 EventingBasicConsumer</li><li>阻塞获取消息</li><li>指定消费队列 BasicConsume</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">           var factory = new ConnectionFactory();</span><br><span class="line">           factory.UserName = &quot;admin&quot;;</span><br><span class="line">           factory.Password = &quot;admin&quot;;</span><br><span class="line">           factory.HostName = &quot;116.196.76.89&quot;;</span><br><span class="line"></span><br><span class="line">           //创建连接</span><br><span class="line">           using (var connection = factory.CreateConnection())</span><br><span class="line">           &#123;//创建信道</span><br><span class="line">               using (var channel = connection.CreateModel())</span><br><span class="line">               &#123;</span><br><span class="line">                   //申明队列</span><br><span class="line">                   channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line">                   //创建事件驱动的消费者类型，绑定消费</span><br><span class="line">                   var consumer = new EventingBasicConsumer(channel);</span><br><span class="line">                   //阻塞获取消息</span><br><span class="line">                   consumer.Received += (model, ea) =&gt;</span><br><span class="line">                   &#123;</span><br><span class="line">                       var body = ea.Body;</span><br><span class="line">                       var message = Encoding.UTF8.GetString(body);</span><br><span class="line">                       Console.WriteLine(&quot; 我是消费者我接收到消息： &#123;0&#125;&quot;, message);</span><br><span class="line">                   &#125;;</span><br><span class="line"></span><br><span class="line">                   //指定消费队列</span><br><span class="line">                   channel.BasicConsume(queue: &quot;hello&quot;,</span><br><span class="line">                                        autoAck: true,</span><br><span class="line">                                        consumer: consumer);</span><br><span class="line"></span><br><span class="line">                   Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class="line">              </span><br><span class="line">                   Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq基本概念</title>
      <link href="/2017/12/18/rabbitmq1/"/>
      <url>/2017/12/18/rabbitmq1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。<br><a id="more"></a> </excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h4 id="rabbitmq基本概念"><a href="#rabbitmq基本概念" class="headerlink" title="rabbitmq基本概念"></a>rabbitmq基本概念</h4><ol><li><p>什么是rabbitmq </p><blockquote><p> Rabbitmq,即AMQP，Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。 AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。</p></blockquote></li><li><p>为什么使用mq?</p><blockquote><p> 场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种1.串行的方式;2.并行的方式<br>(1)串行方式:将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没 有必要等待的东西<br> <img src="https://ws1.sinaimg.cn/large/006MNXdAgy1fqhx1kc5mdj30sm083dgd.jpg" alt=""></p></blockquote></li></ol><p>实际上我们并不需要知道短信是否发送成功,因为我们在发送短信时只需要将对应的参数传给调用的第三方服务发送即可.如果第三方短信平台因为网络或者其他问题,导致无法返回响应结果,程序也就在这里阻塞而无法操作.</p><ol start="3"><li>解决 <blockquote><p>引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理,通过消息队列在去执行发送功能</p></blockquote></li></ol><p><strong>关于mq的相关概念可以去查看官方文档 这里不再过多阐述</strong></p><p><strong>以下是自己的理解,如有不对,还请纠正,谢谢! </strong></p><ul><li>生成者  用于发送消息的程序</li><li>消费者  用于消费消息的程序</li><li>队列 暂存消息的缓存区<blockquote><p>rabbitmq的核心思想是 生成者不直接发送任何消息到队列,而实际上生产者并不知道 消息是否会被传送到队列.相反 ,生产者只能将信息发送到exchange交换器中,而交换机负责接收生产者发送的消息,并且将消息发送到指定的队列</p></blockquote></li><li>消息交换机type的类型 创建交换机时需要channel.ExchangeDeclare(name, type,true,false,null);<ul><li>direct 直接的</li><li>Topic  主题</li><li>Headers 标题</li><li>Fanout  分列</li></ul></li></ul><blockquote><p>Direct Exchange – 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。<br>如果一个队列绑定到该交换机上要求路由键 “key”，则只有被标记为“key”的消息才被转发，只会转发key</p></blockquote><blockquote><p>Topic Exchange将路由值与某种模式进行匹配,此时队列需要绑定在一个模式上.符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.</em>” 只会匹配到“audit.irs”。  <a href="http://www.cnblogs.com/lrzr/p/7365731.html" target="_blank" rel="noopener">传送门</a></p></blockquote><blockquote><p>Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。 Fanout交换机转发消息是最快的。</p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuejs学习3</title>
      <link href="/2017/11/07/vue3/"/>
      <url>/2017/11/07/vue3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |摘要=""><br> 简单介绍vue2.0的过滤器等选项操作.</excerpt></p><p> Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：<br> <a id="more"></a></p><the rest="" of="" contents|="" 余下全文=""><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>场景 :将价格格式化为货币形式 （￥100元）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> var vue = new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &quot;hello word&quot;,</span><br><span class="line">                order: [</span><br><span class="line">                    &#123; name: &quot;苹果&quot;, price: 100 &#125;,</span><br><span class="line">                    &#123; name: &quot;梨子&quot;, price: 150 &#125;,</span><br><span class="line">                    &#123; name: &quot;香蕉&quot;, price: 170 &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            filters: &#123;</span><br><span class="line">                filterPrice(obj,name) &#123;//这里还可以传入参数 </span><br><span class="line">                    return obj + &quot;元/10斤&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">           </span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;li v-for=&quot;item in order&quot;&gt;</span><br><span class="line">       &lt;span&gt; &#123;&#123;item.name&#125;&#125; -- &#123;&#123;item.price | filterPrice&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h4 id="将上诉方法改造一下-判断当前的商品是否为苹果-如果是-显示为无价"><a href="#将上诉方法改造一下-判断当前的商品是否为苹果-如果是-显示为无价" class="headerlink" title="将上诉方法改造一下,判断当前的商品是否为苹果,如果是,显示为无价"></a>将上诉方法改造一下,判断当前的商品是否为苹果,如果是,显示为无价</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">         filters: &#123;</span><br><span class="line">               filterPrice(obj,name) &#123;//传入额外参数name值</span><br><span class="line">                   console.info(name);</span><br><span class="line">                   if(name==&apos;苹果&apos;)&#123;</span><br><span class="line">                       return &apos;不好意思,无价&apos;;</span><br><span class="line">                   &#125;else&#123;</span><br><span class="line">                       return obj + &quot;元/10斤&quot;;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">&lt;li v-for=&quot;item in order&quot;&gt;</span><br><span class="line">   &lt;span&gt; &#123;&#123;item.name&#125;&#125; -- &#123;&#123;item.price | filterPrice(item.name)&#125;&#125; &lt;/span&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意一点 filterPrice第一个参数默认就是 | 之前的值 这里obj默认就为item.price ,所以obj参数我们不用传,只用传第二个参数</p></blockquote><h3 id="Methods-Option-方法选项-用于定义方法"><a href="#Methods-Option-方法选项-用于定义方法" class="headerlink" title="Methods Option  方法选项 (用于定义方法)"></a>Methods Option  方法选项 (用于定义方法)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &#123;&#123; a &#125;&#125;</span><br><span class="line">       &lt;p&gt;&lt;button @click=&quot;add&quot;&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       var app=new Vue(&#123;</span><br><span class="line">           el:&apos;#app&apos;,</span><br><span class="line">           data:&#123;</span><br><span class="line">               a:1</span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               add:function(event)&#123;//绑定click事件方法 </span><br><span class="line">                   this.a++</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>同样,methods中都可以传入参数,这里跟jq中没什么变化 ,当绑定事件add是不传任何参数,那么event代表的就是this变量,也就是click事件变量<br><img src="http://ws1.sinaimg.cn/large/006MNXdAgy1fqixnusd6fj30eq0mfjsr.jpg" alt="image"><br>从图中即可看出</p></blockquote><h3 id="Watch-监控数据变化"><a href="#Watch-监控数据变化" class="headerlink" title="Watch  监控数据变化"></a>Watch  监控数据变化</h3><p><img src="http://ws1.sinaimg.cn/large/006MNXdAgy1fqixsgh7l9g308606hjs4.gif" alt="image"></p><blockquote><p>当温度减少是显示该穿什么衣服</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var suggestion=[&apos;T恤短袖&apos;,&apos;夹克长裙&apos;,&apos;棉衣羽绒服&apos;];</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                temperature:14,</span><br><span class="line">                suggestion:&apos;夹克长裙&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add:function()&#123;</span><br><span class="line">                    this.temperature+=5;</span><br><span class="line">                &#125;,</span><br><span class="line">                reduce:function()&#123;</span><br><span class="line">                    this.temperature-=5;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line">                temperature:function(newVal,oldVal)&#123;</span><br><span class="line">                    if(newVal&gt;=26)&#123;</span><br><span class="line">                        this.suggestion=suggestion[0];</span><br><span class="line">                    &#125;else if(newVal&lt;26 &amp;&amp; newVal &gt;=0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.suggestion=suggestion[1];</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        this.suggestion=suggestion[2];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p&gt;今日温度：&#123;&#123;temperature&#125;&#125;°C&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;穿衣建议:&#123;&#123;this.suggestion&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;button @click=&quot;add&quot;&gt;添加温度&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;reduce&quot;&gt;减少温度&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>watch 是监控属性变化的 ,也就是说在上诉实例中watch下面的temperature是属性,对应的是data中的temperature属性,这里就是监控他 </p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuejs学习2</title>
      <link href="/2017/11/07/vue2/"/>
      <url>/2017/11/07/vue2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |摘要=""><br> 简单介绍vue2.0的生命周期和钩子函数<br> <a id="more"></a></excerpt></p><the rest="" of="" contents|="" 余下全文=""><p>先来两张图理解下</p><p><img src="https://segmentfault.com/img/bVEo3w?w=1200&amp;h=2800" alt=""><br><img src="https://segmentfault.com/img/bVEs9x?w=847&amp;h=572" alt=""></p><p>编写下面代码执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/vue/2.1.3/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    </span><br><span class="line">  var app = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">          message : &quot;xuxiao is boy&quot; </span><br><span class="line">      &#125;,</span><br><span class="line">       beforeCreate: function () &#123;</span><br><span class="line">                console.group(&apos;beforeCreate 创建前状态===============》&apos;);</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot; , &quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //undefined </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)  </span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            console.group(&apos;created 创建完毕状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //undefined</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化 </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: function () &#123;</span><br><span class="line">            console.group(&apos;beforeMount 挂载前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + (this.$el)); //已被初始化</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化  </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化  </span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function () &#123;</span><br><span class="line">            console.group(&apos;mounted 挂载结束状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); //已被初始化</span><br><span class="line">            console.log(this.$el);    </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); //已被初始化</span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); //已被初始化 </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: function () &#123;</span><br><span class="line">            console.group(&apos;beforeUpdate 更新前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);   </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        updated: function () &#123;</span><br><span class="line">            console.group(&apos;updated 更新完成状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: function () &#123;</span><br><span class="line">            console.group(&apos;beforeDestroy 销毁前状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);    </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123;</span><br><span class="line">            console.group(&apos;destroyed 销毁完成状态===============》&apos;);</span><br><span class="line">            console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class="line">            console.log(this.$el);  </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class="line">               console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 本人在开发中主要用到一下几个 :<code>beforeCreate</code>生命周期是组件刚刚被创建,但是属性还没有计算,这时候我们去访问vue实例的属性是不存在的,提示undefind.<br><code>created</code>是组件和属性均已完成,但是还未加载到dom上.<br><code>mounted</code>模板已经编译并且以挂载.<br>比如,我们现在有个场景,在数据加载的时候显示加载动画,加载成功后关闭加载动画,显示加载的数据.这里就需要用到<code>created</code>和 <code>mounted</code>来节后,当组件为 <code>created</code>时显示动画,组件为 <code>mounted</code>已经挂载到dom时关闭动画,并显示数据.当然,你也可以在 <code>beforecreate</code>中去执行动画,看具体的需求.<br><code>update</code>表示在为vue实例属性更新值时执行<br><code>beforeDestroy</code>： 你确认删除XX吗？ destroyed ：当前组件已被删除，清空相关内容</p></blockquote></the>]]></content>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuejs学习1</title>
      <link href="/2017/11/07/vue1/"/>
      <url>/2017/11/07/vue1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |摘要=""><br> Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：<br> <a id="more"></a></excerpt></p><the rest="" of="" contents|="" 余下全文=""><h3 id="vue简单实用"><a href="#vue简单实用" class="headerlink" title="vue简单实用"></a>vue简单实用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Helloworld&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                message:&apos;hello Vue!&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-v-else-v-show-指令"><a href="#v-if-v-else-v-show-指令" class="headerlink" title="v-if  v-else  v-show 指令"></a>v-if  v-else  v-show 指令</h3><p>v-if:是vue 的一个内部指令，指令用在我们的html中。<br><br>v-if用来判断是否加载html的DOM，比如我们模拟一个用户登录状态，在用户登录后显示用户名称。</p><br>html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;v-if &amp; v-show &amp; v-else&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;v-if 判断是否加载&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div v-if=&quot;isLogin&quot;&gt;hello word&lt;/div&gt;</span><br><span class="line">        &lt;div v-else&gt;请登录后操作&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">               isLogin:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br><br>&gt; 这里我们在vue的data里定义了isLogin的值，当它为true时，网页就会显示hello word,否则不显示<br><br><p>v-show: 调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。</p><ul><li>v-if 和v-show的区别：<ul><li>v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。</li><li>v-show：调整css dispaly属性，可以使客户端操作更加流畅。</li></ul></li></ul><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><br>v-for指令是循环渲染一组data中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且item是数组元素迭代的别名。<br></p><ul><li><p>html写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>js写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app=new Vue(&#123;</span><br><span class="line">     el:&apos;#app&apos;,</span><br><span class="line">     data:&#123;</span><br><span class="line">         items:[20,23,18,65,32,19,54,56,41]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这是一个最基础的循环，先在js里定义了items数组，然后在模板中用v-for循环出来，需要注意的是，你需要那个html标签循环，v-for就写在那个上边。</p></blockquote><h3 id="v-on：绑定事件监听器-简写"><a href="#v-on：绑定事件监听器-简写" class="headerlink" title="v-on：绑定事件监听器 简写 @:"></a>v-on：绑定事件监听器 简写 @:</h3><p><img src="http://7xjyw1.com1.z0.glb.clouddn.com/20170227091542.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;v-on事件监听器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;v-on 事件监听器&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       本场比赛得分： &#123;&#123;count&#125;&#125;&lt;br/&gt;</span><br><span class="line">       &lt;button v-on:click=&quot;jiafen&quot;&gt;加分&lt;/button&gt;</span><br><span class="line">       &lt;button v-on:click=&quot;jianfen&quot;&gt;减分&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var app=new Vue(&#123;</span><br><span class="line">            el:&apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                count:1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                jiafen:function()&#123;//定义执行的事件</span><br><span class="line">                    this.count++;</span><br><span class="line">                &#125;,</span><br><span class="line">                jianfen:function()&#123;</span><br><span class="line">                    this.count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="v-bind-指令-绑定css或者attr属性等-简写-src-href"><a href="#v-bind-指令-绑定css或者attr属性等-简写-src-href" class="headerlink" title="v-bind 指令 绑定css或者attr属性等 简写 :src :href"></a>v-bind 指令 绑定css或者attr属性等 简写 :src :href</h3><p>绑定img的src属性 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img v-bind:src=&quot;imgSrc&quot;  width=&quot;200px&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app=new Vue(&#123;</span><br><span class="line">    el:&apos;#app&apos;,</span><br><span class="line">    data:&#123;</span><br><span class="line">          imgSrc:&apos;http://baidu.com/wp-content/uploads/2017/02/vue01-2.jpg&apos;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Aspose.Cells实现的导入导出(备忘)</title>
      <link href="/2017/08/10/excel/"/>
      <url>/2017/08/10/excel/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>使用Aspose.Cells实现的导入导出帮助类<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br></pre></td><td class="code"><pre><span class="line">using System;  </span><br><span class="line">using System.Collections.Generic;  </span><br><span class="line">using System.Data;  </span><br><span class="line">using System.IO;  </span><br><span class="line">using System.Linq;  </span><br><span class="line">using System.Text;  </span><br><span class="line">using System.Threading.Tasks;  </span><br><span class="line">using Aspose.Cells;  </span><br><span class="line">namespace Lzd.Mvc.EasyUi.Common.ExcelUtil  </span><br><span class="line">&#123;  </span><br><span class="line">    ///   </span><br><span class="line">    /// excel操作基类  </span><br><span class="line">    ///   </span><br><span class="line">    ///   </span><br><span class="line"> public   class BaseExcelUtil  </span><br><span class="line">    &#123;  </span><br><span class="line">        private Workbook m_Wb = null;  </span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// 生成Excel  </span><br><span class="line">        ///   </span><br><span class="line">        /// 模板Excel的路径+文件名  </span><br><span class="line">        /// Excel文件的字节对象  </span><br><span class="line">        public byte[] CreateExcel(string url)  </span><br><span class="line">        &#123;  </span><br><span class="line">            FileStream fs = null;  </span><br><span class="line">            try  </span><br><span class="line">            &#123;  </span><br><span class="line">                //读取模板Excel文件的中内容  </span><br><span class="line">                fs = new FileStream(url, FileMode.Open, FileAccess.Read, FileShare.Read);  </span><br><span class="line">  </span><br><span class="line">                m_Wb = new Workbook();  </span><br><span class="line">  </span><br><span class="line">                m_Wb.Open(fs);  </span><br><span class="line">  </span><br><span class="line">                setValue(m_Wb);  </span><br><span class="line">  </span><br><span class="line">                //转换为字节对象并返回  </span><br><span class="line">                return m_Wb.SaveToStream().ToArray();  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">            catch (Exception ex)  </span><br><span class="line">            &#123;  </span><br><span class="line">                throw ex;  </span><br><span class="line">            &#125;  </span><br><span class="line">            finally  </span><br><span class="line">            &#123;  </span><br><span class="line">                fs.Close();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// 设定Excel中的数据   </span><br><span class="line">        /// 数据源为datable类型  </span><br><span class="line">        ///   </span><br><span class="line">        /// 工作簿  </span><br><span class="line">        public virtual void setValue(Workbook wb)  </span><br><span class="line">        &#123;  </span><br><span class="line">            throw new Exception(&quot;The method or operation is not implemented.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// 读取Excel  </span><br><span class="line">        ///   </span><br><span class="line">        /// Excel的路径+文件名  </span><br><span class="line">        /// Excel文件的字节对象  </span><br><span class="line">        public DataTable GetExcel(string url)  </span><br><span class="line">        &#123;  </span><br><span class="line">            FileStream fs = null;  </span><br><span class="line">            try  </span><br><span class="line">            &#123;  </span><br><span class="line">                //读取Excel文件的中内容  </span><br><span class="line">                fs = new FileStream(url, FileMode.Open, FileAccess.Read, FileShare.Read);  </span><br><span class="line">  </span><br><span class="line">                m_Wb = new Workbook();  </span><br><span class="line">  </span><br><span class="line">                m_Wb.Open(fs);  </span><br><span class="line">  </span><br><span class="line">                //设定Excel中的数据  </span><br><span class="line">             return   getValue(m_Wb);  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">            finally  </span><br><span class="line">            &#123;  </span><br><span class="line">                fs.Close();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// 取得Excel中的数据  </span><br><span class="line">        ///   </span><br><span class="line">        /// 工作簿  </span><br><span class="line">        public virtual DataTable getValue(Workbook wb)  </span><br><span class="line">        &#123;  </span><br><span class="line">            throw new Exception(&quot;The method or operation is not implemented.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        ///   </span><br><span class="line">        /// 设置字符串值  </span><br><span class="line">        ///   </span><br><span class="line">        ///   </span><br><span class="line">        ///   </span><br><span class="line">        public void putValue(Cell c, object value)  </span><br><span class="line">        &#123;  </span><br><span class="line">            try  </span><br><span class="line">            &#123;  </span><br><span class="line">                if (value == null || object.Equals(value, DBNull.Value) || value.ToString().Trim().Length == 0)  </span><br><span class="line">                &#123;  </span><br><span class="line">  </span><br><span class="line">                &#125;  </span><br><span class="line">                else  </span><br><span class="line">                &#123;  </span><br><span class="line">                    c.PutValue(value.ToString());  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            catch (Exception)  </span><br><span class="line">            &#123;  </span><br><span class="line">                c.PutValue(&quot;--&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        ///   </span><br><span class="line">        /// 设置数值值  </span><br><span class="line">        ///   </span><br><span class="line">        ///   </span><br><span class="line">        ///   </span><br><span class="line">        public void putValueDouble(Cell c, object value)  </span><br><span class="line">        &#123;  </span><br><span class="line">            try  </span><br><span class="line">            &#123;  </span><br><span class="line">                if (value == null || object.Equals(value, DBNull.Value) || value.ToString().Trim().Length == 0)  </span><br><span class="line">                &#123;  </span><br><span class="line">  </span><br><span class="line">                &#125;  </span><br><span class="line">                else  </span><br><span class="line">                &#123;  </span><br><span class="line">                    c.PutValue(Decimal.Parse(value.ToString()));  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            catch (Exception)  </span><br><span class="line">            &#123;  </span><br><span class="line">                c.PutValue(value.ToString());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        ///   </span><br><span class="line">        /// 设置日期值  </span><br><span class="line">        ///   </span><br><span class="line">        ///   </span><br><span class="line">        ///   </span><br><span class="line">        public void putDateValue(Cell c, object value)  </span><br><span class="line">        &#123;  </span><br><span class="line">            try  </span><br><span class="line">            &#123;  </span><br><span class="line">                if (value == null || object.Equals(value, DBNull.Value) || value.ToString().Trim().Length == 0)  </span><br><span class="line">                &#123;  </span><br><span class="line">  </span><br><span class="line">                &#125;  </span><br><span class="line">                else  </span><br><span class="line">                &#123;  </span><br><span class="line">                    c.PutValue(DateTime.Parse(value.ToString()));  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            catch (Exception)  </span><br><span class="line">            &#123;  </span><br><span class="line">                c.PutValue(value.ToString());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">////实现基类  </span><br><span class="line">  </span><br><span class="line">using System;  </span><br><span class="line">using System.Collections.Generic;  </span><br><span class="line">using System.Data;  </span><br><span class="line">using System.Linq;  </span><br><span class="line">using System.Reflection;  </span><br><span class="line">using System.Text;  </span><br><span class="line">using System.Threading.Tasks;  </span><br><span class="line">using Aspose.Cells;  </span><br><span class="line">namespace Lzd.Mvc.EasyUi.Common.ExcelUtil  </span><br><span class="line">&#123;  </span><br><span class="line">    ///   </span><br><span class="line">    /// Excel帮助类  </span><br><span class="line">    ///   </span><br><span class="line">   public class ExcelUtil :BaseExcelUtil  </span><br><span class="line">    &#123;  </span><br><span class="line">        private DataTable dt;  </span><br><span class="line">        private string title;  </span><br><span class="line">       </span><br><span class="line">        public ExcelUtil() &#123;  </span><br><span class="line">             </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// 从第几行开始读取  </span><br><span class="line">        ///   </span><br><span class="line">        public int FirstRow &#123; get; set; &#125;  </span><br><span class="line">        ///   </span><br><span class="line">        /// 从第几列开始读取  </span><br><span class="line">        ///   </span><br><span class="line">        public int FirstColumns &#123; get; set; &#125;  </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// excel标题  </span><br><span class="line">        ///   </span><br><span class="line">        public string Title  </span><br><span class="line">        &#123;  </span><br><span class="line">            get &#123; return title; &#125;  </span><br><span class="line">            set &#123; title = value; &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        private string fileName;  </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// 文件名  </span><br><span class="line">        ///   </span><br><span class="line">        public string FileName  </span><br><span class="line">        &#123;  </span><br><span class="line">            get &#123; return fileName; &#125;  </span><br><span class="line">            set &#123; fileName = value; &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        public DataTable Dt  </span><br><span class="line">        &#123;  </span><br><span class="line">            get &#123; return dt; &#125;  </span><br><span class="line">            set &#123; dt = value; &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        public bool Flag  </span><br><span class="line">        &#123;  </span><br><span class="line">            set;  </span><br><span class="line">            get;  </span><br><span class="line">        &#125;  </span><br><span class="line">      ///  </span><br><span class="line">      ///  </span><br><span class="line">      ///导出设定值  </span><br><span class="line">        public override void setValue(Workbook wb)  </span><br><span class="line">        &#123;  </span><br><span class="line">             </span><br><span class="line">            int index = 0;  </span><br><span class="line">            Worksheet ws = null;  </span><br><span class="line">            int rcount = dt.Rows.Count, columns = dt.Columns.Count;  </span><br><span class="line">            if (dt != null &amp;&amp; dt.Rows.Count &gt; 0)  </span><br><span class="line">            &#123;  </span><br><span class="line">                index = wb.Worksheets.AddCopy(0);  </span><br><span class="line">                ws = wb.Worksheets[index];  </span><br><span class="line">                ws.Name = FileName.Replace(&quot;.xls&quot;, &quot;&quot;);  </span><br><span class="line">  </span><br><span class="line">                try  </span><br><span class="line">                &#123;  </span><br><span class="line">                    putValue(ws.Cells[0, 0], this.title);  </span><br><span class="line">                    int i = 1;  </span><br><span class="line">  </span><br><span class="line">                    for (int j = 0; j &lt; columns; j++)  </span><br><span class="line">                    &#123;  </span><br><span class="line">  </span><br><span class="line">                        putValue(ws.Cells[1, j], dt.Columns[j].ColumnName);  </span><br><span class="line">                    &#125;  </span><br><span class="line">  </span><br><span class="line">                    for (int j = 0; j &lt; rcount; j++)  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        i++;  </span><br><span class="line">                        for (int h = 0; h &lt; columns; h++)  </span><br><span class="line">                        &#123;  </span><br><span class="line">  </span><br><span class="line">                            putValue(ws.Cells[i, h], dt.Rows[j][h].ToString());  </span><br><span class="line">                        &#125;  </span><br><span class="line">  </span><br><span class="line">                    &#125;  </span><br><span class="line">  </span><br><span class="line">                    wb.Worksheets.RemoveAt(0);  </span><br><span class="line">                &#125;  </span><br><span class="line">                catch (Exception ex)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    throw ex;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ///   </span><br><span class="line">        /// 导入excel  </span><br><span class="line">        ///   </span><br><span class="line">        /// 读取的文件名  </span><br><span class="line">        /// 从第几行开始读取  </span><br><span class="line">        /// 从第几列开始读取  </span><br><span class="line">        ///   </span><br><span class="line">        ///   </span><br><span class="line">  </span><br><span class="line">        public override DataTable getValue(Workbook wb)  </span><br><span class="line">        &#123;  </span><br><span class="line">          </span><br><span class="line">            Worksheet sheet = wb.Worksheets[0];  </span><br><span class="line">            Cells cells = sheet.Cells;  </span><br><span class="line">  </span><br><span class="line">            return cells.ExportDataTableAsString(FirstRow, FirstColumns, cells.MaxDataRow + 1, cells.MaxDataColumn + 1, true);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">         </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    /////导出调用方法  </span><br><span class="line">     public ActionResult ToExcel() &#123;  </span><br><span class="line">            List list = new List();  </span><br><span class="line">            for (int i = 0; i &lt; 100; i++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                UserInfo info = new UserInfo();  </span><br><span class="line">                info.Age = i.ToString();  </span><br><span class="line">                info.ID = i;  </span><br><span class="line">                info.Name = &quot;姓名&quot; + i;  </span><br><span class="line">                list.Add(info);  </span><br><span class="line">            &#125;  </span><br><span class="line">            ///将list类型转换为datatable  </span><br><span class="line">            DataTable dt= DataTableHelper.IListToDataTable(list);  </span><br><span class="line">            //实例化帮助类  </span><br><span class="line">            ExcelUtil exc = new ExcelUtil();  </span><br><span class="line">            exc.Dt = dt;  </span><br><span class="line">            exc.FileName = &quot;导出测试.xls&quot;;  </span><br><span class="line">            exc.Title = &quot;导出测试&quot;;  </span><br><span class="line">            //需要写入的模板  </span><br><span class="line">            string url = Server.MapPath(&quot;/Content/Down/template.xls&quot;);  </span><br><span class="line">            byte[] data = exc.CreateExcel(url);  </span><br><span class="line">            //浏览器下载文件  </span><br><span class="line">            Response.AppendHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + exc.FileName);//HttpUtility.UrlEncode(r.FileName, Encoding.UTF8));  </span><br><span class="line">            Response.ContentType = &quot;application/ms-excel&quot;;  </span><br><span class="line">            Response.AddHeader(&quot;Content-Length&quot;, data.Length.ToString());  </span><br><span class="line">            Response.ContentEncoding = System.Text.Encoding.GetEncoding(&quot;UTF-8&quot;);  </span><br><span class="line">            Response.BinaryWrite(data);  </span><br><span class="line">            System.Web.HttpContext.Current.ApplicationInstance.CompleteRequest();  </span><br><span class="line">            return Content(&quot;ss&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">///导入调用方法  </span><br><span class="line">  public ActionResult ImportExcel()  </span><br><span class="line">        &#123;  </span><br><span class="line">            string url = Server.MapPath(&quot;/Content/Down/Import.xls&quot;);  </span><br><span class="line">            ExcelUtil exc = new ExcelUtil();  </span><br><span class="line">            exc.FirstRow = 1;  </span><br><span class="line">            exc.FirstColumns = 0;  </span><br><span class="line">             DataTable dt= exc.GetExcel(url);  </span><br><span class="line">             </span><br><span class="line">        </span><br><span class="line">  </span><br><span class="line">            return Content(&quot;ss&quot;);  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mvc中ef仓储类</title>
      <link href="/2017/04/14/mvc2/"/>
      <url>/2017/04/14/mvc2/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>mvc中ef仓储类<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><h3 id="iRepository"><a href="#iRepository" class="headerlink" title="iRepository"></a>iRepository</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public interface IEFRepository&lt;TEntity&gt; where TEntity : class</span><br><span class="line">  &#123;</span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      ///</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;entity&quot;&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">      bool AddEntity(TEntity entity);</span><br><span class="line">      bool AddEntity(IEnumerable&lt;TEntity&gt; entities);</span><br><span class="line">      bool UpdateEntity(TEntity entity);</span><br><span class="line">      bool UpdateEntity(IEnumerable&lt;TEntity&gt; entities);</span><br><span class="line">      bool DeleteEntity(int ID);</span><br><span class="line">      bool DeleteEntity(TEntity entity);</span><br><span class="line">      bool DeleteEntity(Expression&lt;Func&lt;TEntity, bool&gt;&gt; predicate);</span><br><span class="line">      bool DeleteEntity(IEnumerable&lt;TEntity&gt; entities);</span><br><span class="line"></span><br><span class="line">      IList&lt;TEntity&gt; LoadEntities(Expression&lt; Func&lt;TEntity, bool&gt;&gt; whereLambda = null);</span><br><span class="line">      IList&lt;TEntity&gt; LoadEntities(ref int total,Expression&lt;Func&lt;TEntity,object&gt;&gt;order,int pageIndex = 1, int pageSize = 30,Expression&lt; Func&lt;TEntity, bool&gt;&gt; whereLambda = null);</span><br><span class="line">      IList&lt;TEntity&gt; LoadEntities(string sql);</span><br><span class="line">      TEntity FindByID(object ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Reponestory"><a href="#Reponestory" class="headerlink" title="Reponestory"></a>Reponestory</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">public class Repository&lt;T&gt; : IEFRepository&lt;T&gt; where T :class</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      private DbSet&lt;T&gt; dbset;</span><br><span class="line">      private gains_contentsEntities Con = null;</span><br><span class="line"></span><br><span class="line">      //private DbContext Con &#123;</span><br><span class="line"></span><br><span class="line">      //    get &#123;</span><br><span class="line">      //        Entities2 db = new Entities2();</span><br><span class="line">      //        dbset = db.Set&lt;T&gt;();</span><br><span class="line">      //        return db;</span><br><span class="line">      //    &#125;</span><br><span class="line">      //&#125;</span><br><span class="line"></span><br><span class="line">      public Repository() &#123;</span><br><span class="line">          Con = new gains_contentsEntities();</span><br><span class="line">          dbset = Con.Set&lt;T&gt;();</span><br><span class="line">           </span><br><span class="line">      &#125;</span><br><span class="line">      public bool AddEntity(T entity)</span><br><span class="line">      &#123;</span><br><span class="line">          try</span><br><span class="line">          &#123;</span><br><span class="line">              Con.Entry&lt;T&gt;(entity).State = EntityState.Added;</span><br><span class="line">              Con.Set&lt;T&gt;().Add(entity);</span><br><span class="line">              int COUNT = Con.SaveChanges();</span><br><span class="line">              return COUNT &gt; 0;</span><br><span class="line">          &#125;</span><br><span class="line">          catch (Exception ex)</span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">              throw;</span><br><span class="line">          &#125;</span><br><span class="line">         // Con.Set&lt;T&gt;().Attach(entity);</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public bool AddEntity(IEnumerable&lt;T&gt; entities)</span><br><span class="line">      &#123;</span><br><span class="line">          try</span><br><span class="line">          &#123;</span><br><span class="line">              Con.Configuration.AutoDetectChangesEnabled = false;</span><br><span class="line">              foreach (T entity in entities)</span><br><span class="line">              &#123;</span><br><span class="line">                  AddEntity(entity);</span><br><span class="line">              &#125;</span><br><span class="line">              return true;</span><br><span class="line">          &#125;</span><br><span class="line">          finally</span><br><span class="line">          &#123;</span><br><span class="line">              Con.Configuration.AutoDetectChangesEnabled = true;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      public bool UpdateEntity(T entity)</span><br><span class="line">      &#123;</span><br><span class="line">          Con.Set&lt;T&gt;().Attach(entity);</span><br><span class="line">          Con.Entry&lt;T&gt;(entity).State = EntityState.Modified;</span><br><span class="line">          return Con.SaveChanges() &gt; 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public bool UpdateEntity(IEnumerable&lt;T&gt; entities)</span><br><span class="line">      &#123;</span><br><span class="line">          try</span><br><span class="line">          &#123;</span><br><span class="line">              Con.Configuration.AutoDetectChangesEnabled = false;</span><br><span class="line">              foreach (T entity in entities)</span><br><span class="line">              &#123;</span><br><span class="line">                  UpdateEntity(entity);</span><br><span class="line">              &#125;</span><br><span class="line">              return true;</span><br><span class="line">          &#125;</span><br><span class="line">          finally</span><br><span class="line">          &#123;</span><br><span class="line">              Con.Configuration.AutoDetectChangesEnabled = true;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public bool DeleteEntity(int ID)</span><br><span class="line">      &#123;</span><br><span class="line">          T t = FindByID(ID);</span><br><span class="line">          return DeleteEntity(t);</span><br><span class="line">         </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public bool DeleteEntity(string ID)</span><br><span class="line">      &#123;</span><br><span class="line">          T t = FindByID(ID);</span><br><span class="line">          return DeleteEntity(t);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public bool DeleteEntity(T entity)</span><br><span class="line">      &#123;</span><br><span class="line">          Con.Set&lt;T&gt;().Attach(entity);</span><br><span class="line">          Con.Entry&lt;T&gt;(entity).State = EntityState.Deleted;</span><br><span class="line">          return Con.SaveChanges() &gt; 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public bool DeleteEntity(Expression&lt;Func&lt;T, bool&gt;&gt; predicate)</span><br><span class="line">      &#123;</span><br><span class="line">          List&lt;T&gt; entities = Con.Set&lt;T&gt;().Where(predicate).ToList();</span><br><span class="line">          return Con.SaveChanges() &gt; 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public bool DeleteEntity(IEnumerable&lt;T&gt; entities)</span><br><span class="line">      &#123;</span><br><span class="line">          try</span><br><span class="line">          &#123;</span><br><span class="line">              Con.Configuration.AutoDetectChangesEnabled = false;</span><br><span class="line">              foreach (T entity in entities)</span><br><span class="line">              &#123;</span><br><span class="line">                  DeleteEntity(entity);</span><br><span class="line">              &#125;</span><br><span class="line">              return true;</span><br><span class="line">          &#125;</span><br><span class="line">          finally</span><br><span class="line">          &#123;</span><br><span class="line">              Con.Configuration.AutoDetectChangesEnabled = true;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public IList&lt;T&gt; LoadEntities(Expression&lt; Func&lt;T, bool&gt;&gt; whereLambda = null)</span><br><span class="line">      &#123;</span><br><span class="line">          if (whereLambda!=null)</span><br><span class="line">              return Con.Set&lt;T&gt;().AsNoTracking().Where&lt;T&gt;(whereLambda.Compile()).ToList();</span><br><span class="line">          else return Con.Set&lt;T&gt;().AsNoTracking().ToList();</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      public IList&lt;T&gt; LoadEntities(string sql)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          return Con.Database.SqlQuery&lt;T&gt;(sql).ToList();</span><br><span class="line">      </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      public IList&lt;T&gt; LoadEntities(ref int total,Expression&lt;Func&lt;T,object&gt;&gt; orderByProperty, int pageIndex = 1, int pageSize = 30,  Expression&lt; Func&lt;T, bool&gt;&gt; whereLambda = null)</span><br><span class="line">      &#123;</span><br><span class="line">          if (whereLambda != null)&#123;</span><br><span class="line">              total = Con.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda).AsQueryable().Count();</span><br><span class="line">              return Con.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda).AsQueryable().OrderBy(orderByProperty).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">          &#125;</span><br><span class="line">             </span><br><span class="line">          else &#123;</span><br><span class="line">              total = Con.Set&lt;T&gt;().AsQueryable().Count();</span><br><span class="line">              return Con.Set&lt;T&gt;().AsQueryable().OrderBy(orderByProperty).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public T FindByID(object ID)</span><br><span class="line">      &#123;</span><br><span class="line">          return Con.Set&lt;T&gt;().Find(ID);</span><br><span class="line">         </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> Asp.Net Mvc </category>
          
          <category> ef </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ef </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mvc中实现图片验证码</title>
      <link href="/2017/04/14/mvs1/"/>
      <url>/2017/04/14/mvs1/</url>
      <content type="html"><![CDATA[<p><excrept in="" index="" |="" 摘要=""><br>mvc中实现图片验证码<br><a id="more"></a></excrept></p><the rest="" of="" contents="" |余下全文=""><blockquote><p>mvc中实现图片验证码很简单，只需要创建一个 FileContentResult的方法返回file就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;  </span><br><span class="line">/// 创建一个文件方法  </span><br><span class="line">/// &lt;/summary&gt;  </span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;  </span><br><span class="line">public FileContentResult GetCode() &#123;  </span><br><span class="line">    //参数一：产生几个字符的验证码图片  参数二：验证码的形式(数字、字母、数字字母混合都有)  </span><br><span class="line">    ValidateCode validCode = new ValidateCode(5, ValidateCode.CodeType.Alphas);  </span><br><span class="line">        //将图片转换为二进制  </span><br><span class="line">   MemoryStream ms =validCode.CreateCheckCodeImage() as MemoryStream;  </span><br><span class="line">        dateCode = validCode.CheckCode;  //通过 CheckCode获取当前的验证码  </span><br><span class="line">    byte[] buffurPic = ms.ToArray();    </span><br><span class="line">    return File(buffurPic, &quot;image/jpeg&quot;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>帮助方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line">using System;  </span><br><span class="line">using System.Collections.Generic;  </span><br><span class="line">using System.Linq;  </span><br><span class="line">using System.Text;  </span><br><span class="line">using System.Threading.Tasks;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">using System.Drawing;  </span><br><span class="line">using System.Drawing.Drawing2D;  </span><br><span class="line">using System.IO;  </span><br><span class="line">  </span><br><span class="line">namespace Helper  </span><br><span class="line">&#123;  </span><br><span class="line">    public class ValidateCode  </span><br><span class="line">    &#123;  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">         #region Private Fields  </span><br><span class="line">  </span><br><span class="line">      private const double PI = 3.1415926535897932384626433832795;  </span><br><span class="line">  </span><br><span class="line">      private const double PI2 = 6.283185307179586476925286766559;  </span><br><span class="line">  </span><br><span class="line">      //private readonly int _wordsLen = 4;   </span><br><span class="line">  </span><br><span class="line">      private int _len;  </span><br><span class="line">  </span><br><span class="line">      private CodeType _codetype;  </span><br><span class="line">  </span><br><span class="line">      private readonly Single _jianju = (float)18.0;  </span><br><span class="line">  </span><br><span class="line">      private readonly Single _height = (float)24.0;  </span><br><span class="line">  </span><br><span class="line">      private  string _checkCode;  </span><br><span class="line"> </span><br><span class="line">      #endregion  </span><br><span class="line"> </span><br><span class="line">      #region Public Property  </span><br><span class="line">  </span><br><span class="line">      public  string CheckCode  </span><br><span class="line">      &#123;  </span><br><span class="line">  </span><br><span class="line">          get  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              return _checkCode;  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      #endregion  </span><br><span class="line"> </span><br><span class="line">      #region Constructors  </span><br><span class="line">  </span><br><span class="line">      ///    </span><br><span class="line">  </span><br><span class="line">      /// public constructors   </span><br><span class="line">  </span><br><span class="line">      ///    </span><br><span class="line">  </span><br><span class="line">      ///  验证码长度    </span><br><span class="line">  </span><br><span class="line">      ///  验证码类型：字母、数字、字母+ 数字    </span><br><span class="line">  </span><br><span class="line">      public ValidateCode(int len, CodeType ctype)  </span><br><span class="line">      &#123;  </span><br><span class="line">  </span><br><span class="line">          this._len = len;  </span><br><span class="line">  </span><br><span class="line">          this._codetype = ctype;  </span><br><span class="line">  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      #endregion  </span><br><span class="line"> </span><br><span class="line">      #region Public Field  </span><br><span class="line">  </span><br><span class="line">      public enum CodeType &#123; Words, Numbers, Characters, Alphas &#125;  </span><br><span class="line"> </span><br><span class="line">      #endregion  </span><br><span class="line"> </span><br><span class="line">      #region Private Methods  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      public string GenerateNumbers()  </span><br><span class="line">      &#123;  </span><br><span class="line">  </span><br><span class="line">          string strOut = &quot;&quot;;  </span><br><span class="line">  </span><br><span class="line">          System.Random random = new Random();  </span><br><span class="line">  </span><br><span class="line">          for (int i = 0; i &lt; _len; i++)  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              string num = Convert.ToString(random.Next(10000) % 10);  </span><br><span class="line">  </span><br><span class="line">              strOut += num;  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          return strOut.Trim();  </span><br><span class="line">  </span><br><span class="line">      &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      public string GenerateCharacters()  </span><br><span class="line">      &#123;  </span><br><span class="line">  </span><br><span class="line">          string strOut = &quot;&quot;;  </span><br><span class="line">  </span><br><span class="line">          System.Random random = new Random();  </span><br><span class="line">  </span><br><span class="line">          for (int i = 0; i &lt; _len; i++)  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              string num = Convert.ToString((char)(65 + random.Next(10000) % 26));  </span><br><span class="line">  </span><br><span class="line">              strOut += num;  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          return strOut.Trim();  </span><br><span class="line">  </span><br><span class="line">      &#125;  </span><br><span class="line">  </span><br><span class="line">      //   </span><br><span class="line">  </span><br><span class="line">      public string GenerateAlphas()  </span><br><span class="line">      &#123;  </span><br><span class="line">  </span><br><span class="line">          string strOut = &quot;&quot;;  </span><br><span class="line">  </span><br><span class="line">          string num = &quot;&quot;;  </span><br><span class="line">  </span><br><span class="line">          System.Random random = new Random();  </span><br><span class="line">  </span><br><span class="line">          for (int i = 0; i &lt; _len; i++)  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              if (random.Next(500) % 2 == 0)  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  num = Convert.ToString(random.Next(10000) % 10);  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">  </span><br><span class="line">              else  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  num = Convert.ToString((char)(65 + random.Next(10000) % 26));  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">  </span><br><span class="line">              strOut += num;  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          return strOut.Trim();  </span><br><span class="line">  </span><br><span class="line">      &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      private System.Drawing.Bitmap TwistImage(Bitmap srcBmp, bool bXDir, double dMultValue, double dPhase)  </span><br><span class="line">      &#123;  </span><br><span class="line">  </span><br><span class="line">          System.Drawing.Bitmap destBmp = new Bitmap(srcBmp.Width, srcBmp.Height);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          // 将位图背景填充为白色   </span><br><span class="line">  </span><br><span class="line">          System.Drawing.Graphics graph = System.Drawing.Graphics.FromImage(destBmp);  </span><br><span class="line">  </span><br><span class="line">          graph.FillRectangle(new SolidBrush(System.Drawing.Color.White), 0, 0, destBmp.Width, destBmp.Height);  </span><br><span class="line">  </span><br><span class="line">          graph.Dispose();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          double dBaseAxisLen = bXDir ? (double)destBmp.Height : (double)destBmp.Width;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          for (int i = 0; i &lt; destBmp.Width; i++)  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              for (int j = 0; j &lt; destBmp.Height; j++)  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  double dx = 0;  </span><br><span class="line">  </span><br><span class="line">                  dx = bXDir ? (PI2 * (double)j) / dBaseAxisLen : (PI2 * (double)i) / dBaseAxisLen;  </span><br><span class="line">  </span><br><span class="line">                  dx += dPhase;  </span><br><span class="line">  </span><br><span class="line">                  double dy = Math.Sin(dx);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">                  // 取得当前点的颜色   </span><br><span class="line">  </span><br><span class="line">                  int nOldX = 0, nOldY = 0;  </span><br><span class="line">  </span><br><span class="line">                  nOldX = bXDir ? i + (int)(dy * dMultValue) : i;  </span><br><span class="line">  </span><br><span class="line">                  nOldY = bXDir ? j : j + (int)(dy * dMultValue);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">                  System.Drawing.Color color = srcBmp.GetPixel(i, j);  </span><br><span class="line">  </span><br><span class="line">                  if (nOldX &gt;= 0 &amp;&amp; nOldX &lt; destBmp.Width  </span><br><span class="line">  </span><br><span class="line">                   &amp;&amp; nOldY &gt;= 0 &amp;&amp; nOldY &lt; destBmp.Height)  </span><br><span class="line">                  &#123;  </span><br><span class="line">  </span><br><span class="line">                      destBmp.SetPixel(nOldX, nOldY, color);  </span><br><span class="line">  </span><br><span class="line">                  &#125;  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          return destBmp;  </span><br><span class="line">  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      #endregion  </span><br><span class="line"> </span><br><span class="line">      #region Public Methods  </span><br><span class="line">  </span><br><span class="line">      public Stream CreateCheckCodeImage()  </span><br><span class="line">      &#123;  </span><br><span class="line">  </span><br><span class="line">          string checkCode;  </span><br><span class="line">  </span><br><span class="line">          switch (_codetype)  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              case CodeType.Alphas:  </span><br><span class="line">  </span><br><span class="line">                  checkCode = GenerateAlphas();  </span><br><span class="line">  </span><br><span class="line">                  break;  </span><br><span class="line">  </span><br><span class="line">              case CodeType.Numbers:  </span><br><span class="line">  </span><br><span class="line">                  checkCode = GenerateNumbers();  </span><br><span class="line">  </span><br><span class="line">                  break;  </span><br><span class="line">  </span><br><span class="line">              case CodeType.Characters:  </span><br><span class="line">  </span><br><span class="line">                  checkCode = GenerateCharacters();  </span><br><span class="line">  </span><br><span class="line">                  break;  </span><br><span class="line">  </span><br><span class="line">              default:  </span><br><span class="line">  </span><br><span class="line">                  checkCode = GenerateAlphas();  </span><br><span class="line">  </span><br><span class="line">                  break;  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          this._checkCode = checkCode;  </span><br><span class="line">  </span><br><span class="line">          MemoryStream ms = null;  </span><br><span class="line">  </span><br><span class="line">          //   </span><br><span class="line">  </span><br><span class="line">          if (checkCode == null || checkCode.Trim() == String.Empty)  </span><br><span class="line">  </span><br><span class="line">              return null;  </span><br><span class="line">  </span><br><span class="line">          Bitmap image = new System.Drawing.Bitmap((int)Math.Ceiling((checkCode.Length * _jianju)), (int)_height);  </span><br><span class="line">  </span><br><span class="line">          Graphics g = Graphics.FromImage(image);  </span><br><span class="line">  </span><br><span class="line">          try  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              Random random = new Random();  </span><br><span class="line">  </span><br><span class="line">              g.Clear(Color.White);  </span><br><span class="line">  </span><br><span class="line">              // 画图片的背景噪音线   </span><br><span class="line">  </span><br><span class="line">              for (int i = 0; i &lt; 18; i++)  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  int x1 = random.Next(image.Width);  </span><br><span class="line">  </span><br><span class="line">                  int x2 = random.Next(image.Width);  </span><br><span class="line">  </span><br><span class="line">                  int y1 = random.Next(image.Height);  </span><br><span class="line">  </span><br><span class="line">                  int y2 = random.Next(image.Height);  </span><br><span class="line">  </span><br><span class="line">                  g.DrawLine(new Pen(Color.FromArgb(random.Next()), 1), x1, y1, x2, y2);  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">  </span><br><span class="line">              Font font = new System.Drawing.Font(&quot;Times New Roman&quot;, 14, System.Drawing.FontStyle.Bold);  </span><br><span class="line">  </span><br><span class="line">              LinearGradientBrush brush = new LinearGradientBrush(new Rectangle(0, 0, image.Width, image.Height), Color.Blue, Color.DarkRed, 1.2f, true);  </span><br><span class="line">  </span><br><span class="line">              if (_codetype != CodeType.Words)  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  for (int i = 0; i &lt; checkCode.Length; i++)  </span><br><span class="line">                  &#123;  </span><br><span class="line">  </span><br><span class="line">                      g.DrawString(checkCode.Substring(i, 1), font, brush, 2 + i * _jianju, 1);  </span><br><span class="line">  </span><br><span class="line">                  &#125;  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">              else  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  g.DrawString(checkCode, font, brush, 2, 2);  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">  </span><br><span class="line">              // 画图片的前景噪音点   </span><br><span class="line">  </span><br><span class="line">              for (int i = 0; i &lt; 150; i++)  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  int x = random.Next(image.Width);  </span><br><span class="line">  </span><br><span class="line">                  int y = random.Next(image.Height);  </span><br><span class="line">  </span><br><span class="line">                  image.SetPixel(x, y, Color.FromArgb(random.Next()));  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">  </span><br><span class="line">              // 画图片的波形滤镜效果   </span><br><span class="line">  </span><br><span class="line">              if (_codetype != CodeType.Words)  </span><br><span class="line">              &#123;  </span><br><span class="line">  </span><br><span class="line">                  image = TwistImage(image, true, 3, 1);  </span><br><span class="line">  </span><br><span class="line">              &#125;  </span><br><span class="line">  </span><br><span class="line">              // 画图片的边框线   </span><br><span class="line">  </span><br><span class="line">              g.DrawRectangle(new Pen(Color.Silver), 0, 0, image.Width - 1, image.Height - 1);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">              ms = new System.IO.MemoryStream();  </span><br><span class="line">  </span><br><span class="line">              image.Save(ms, System.Drawing.Imaging.ImageFormat.Gif);  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          finally  </span><br><span class="line">          &#123;  </span><br><span class="line">  </span><br><span class="line">              g.Dispose();  </span><br><span class="line">  </span><br><span class="line">              image.Dispose();  </span><br><span class="line">  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          return ms;  </span><br><span class="line">  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      #endregion  </span><br><span class="line">        </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> Asp.Net Mvc </category>
          
          <category> mvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
